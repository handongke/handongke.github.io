<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>从零开始免费搭建自己的博客(二)——基于 GitHub pages 建站</title>
    <url>/2021/01/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E4%BA%8C)%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EGitHub%20pages%E5%BB%BA%E7%AB%99/</url>
    <content><![CDATA[<blockquote>
<p>​    本文是博客搭建系列文章第二篇，其他文章链接：</p>
<ol>
<li>从零开始免费搭建自己的博客(一)——<a href="https://yushuaigee.gitee.io/2020/12/31/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%80-%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/">本地搭建 Hexo 框架</a></li>
<li><strong>从零开始免费搭建自己的博客(二)——<a href="https://yushuaigee.gitee.io/2021/01/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%BA%8C-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-GitHub-pages-%E5%BB%BA%E7%AB%99/">基于 GitHub pages 建站</a></strong></li>
<li>从零开始免费搭建自己的博客(三)——<a href="https://yushuaigee.gitee.io/2021/01/02/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%89-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-Gitee-pages-%E5%BB%BA%E7%AB%99/">基于 Gitee pages 建站</a></li>
<li>从零开始免费搭建自己的博客(四)——<a href="https://yushuaigee.gitee.io/2021/01/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E5%9B%9B)%E2%80%94%E2%80%94%E7%BC%96%E5%86%99Markdown%E6%96%87%E7%AB%A0%E5%88%A9%E5%99%A8%20Typora/">编写Markdown文章利器 Typora</a></li>
<li>从零开始免费搭建自己的博客(五)——<a href="https://yushuaigee.gitee.io/2021/01/14/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E4%BA%94)%E2%80%94%E2%80%94Typora%20+%20PicGo%20+%20GitHub%20Gitee%E5%9B%BE%E5%BA%8A/">Typora + PicGo + GitHub/Gitee图床</a></li>
<li>从零开始免费搭建自己的博客(六)——三个站点一键发布博客</li>
<li>从零开始免费搭建自己的博客(七)——迁移 CSDN 博客到个人博客站点</li>
<li>从零开始免费搭建自己的博客(八)——博客网站个性化设置及优化</li>
</ol>
</blockquote>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在第一篇文章里，我们利用 Hexo 框架在本地搭建了一个精美的博客，可是只能本地访问，要想发布到互联网上，还需要将它部署在网站上。</p>
<p>博客的功能只要能阅读文章就够了，因此可以考虑将其部署在提供静态网页托管服务的网站上，这样就省去了购买服务器(云主机)，购买域名，购买大网 IP 这些步骤，不仅省钱，更重要的是省事儿。</p>
<p>当前云计算如此流行，许多平台都提供了静态网页托管服务，其中最方便的当然是 GitHub Pages，只需要注册一个账号就可以使用。GitHub Pages的服务器毕竟在国外，如果觉得访问太慢，也可以选择国内功能相似的 Gitee Pages。</p>
<p>本篇文章介绍怎样利用 GitHub 提供的免费静态网页托管服务 GitHub Pages 建站。</p>
<h2 id="一、-GitHub-Pages-简介"><a href="#一、-GitHub-Pages-简介" class="headerlink" title="一、 GitHub Pages 简介"></a>一、 GitHub Pages 简介</h2><p>GitHub 是世界上最流行的软件源代码托管服务平台，为什么要提供网页托管服务呢？</p>
<p>这是因为一个项目的主页如果只有源码，对新接触的人很不友好，不知从何处下手。虽然已经有了 readme.md 文件，但毕竟不如一个直观的网页来的直接。于是 GitHub 就设计了 Pages 功能，允许用户设计一个图文并茂的网页作为项目首页。</p>
<p>虽然 GitHub Pages 的初衷是提供自定义的项目首页，但是它的玩法不止这一个。因此许多博主都用这个功能来搭建自己的博客，因为它实在是太太方便了。</p>
<p>去GitHub Pages 官网 <a href="https://pages.github.com/">pages.github</a> ，拉到最后，可以看到官方也推荐使用 GitHub Pages 搭建博客，并且提供了示例教程。</p>
<h2 id="二、GitHub-Pages-准备"><a href="#二、GitHub-Pages-准备" class="headerlink" title="二、GitHub Pages 准备"></a>二、GitHub Pages 准备</h2><p>在发布之前，要先准备好自己的GitHub Pages 。</p>
<h3 id="1-注册-GitHub-账号"><a href="#1-注册-GitHub-账号" class="headerlink" title="1. 注册 GitHub 账号"></a>1. 注册 GitHub 账号</h3><p>首先需要注册一个 GitHub 账号，如果已经有账号直接看下一步。</p>
<p>打开 GitHub 官网：<a href="https://github.com/">github.com</a>。如果这里打开速度已经不容忍受了，建议直接看下一篇使用 Gitee 建站。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229223941265.png" alt="image-20201229223941265"></p>
<p>点击右上角<kbd>Sign up</kbd>注册，填写用户名，邮箱，密码。注意，此处用户名是唯一ID，建议取个有意义的名字。点击注册后会发送一封验证邮件到填写的邮箱，登录自己的邮箱点击链接进行验证，GitHub 账号就注册好了。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229224251159.png" alt="image-20201229224251159"></p>
<h3 id="2-创建-GitHub-Pages-仓库"><a href="#2-创建-GitHub-Pages-仓库" class="headerlink" title="2. 创建 GitHub Pages 仓库"></a>2. 创建 GitHub Pages 仓库</h3><p>点击右上角<kbd>Sign in</kbd>登录后，点击左上角<kbd>New</kbd>新建仓库。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229224505117.png" alt="image-20201229224505117"></p>
<p>由于每个 GitHub 账户只能建立一个 GitHub Pages 页面，所以 Repository name 必须填<code>&lt;你的用户名&gt;.github.io</code>，否则就会建立一个普通仓库，GitHub Pages 功能不会生效。比如用户名是<code>jacksparrow</code>，Repository name 这里就填<code>jacksparrow.github.io</code>，不知道用户名是哪个，可以点击页面右上角头像，看到第一行“Signed in as <code>xxx</code>”字样， <code>xxx</code>即为这里的用户名。</p>
<p>Description 填写仓库描述，比如 <code>jacksparrow&#39;s blog</code>等，可不填。</p>
<p>注意勾选 <code>Public</code> ，否则 GitHub Pages 功能不会生效。建议勾选 <code>Add a README file</code>，会自动生成一个 <code>readme.md</code>文件。</p>
<p>最后点击<kbd>Create repository</kbd>创建仓库。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229224741804.png" alt="image-20201229224741804"></p>
<h3 id="3-测试-GitHub-Pages-页面"><a href="#3-测试-GitHub-Pages-页面" class="headerlink" title="3. 测试  GitHub Pages 页面"></a>3. 测试  GitHub Pages 页面</h3><p>创建 GitHub Pages 仓库后，为了测试能否访问 GitHub Pages 服务，我们给它添加一个静态网页。</p>
<p>点击<kbd>Add file</kbd> – <kbd>Create new file</kbd>在仓库下新建文件。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229225208056.png" alt="image-20201229225208056"></p>
<p>输入文件名<code>index.html</code>，在下面输入内容<code>&lt;h1&gt;Hello My Blog!&lt;/h1&gt;</code>，这是 html 标记语言，表示一级标题。</p>
<p>其他保持默认，点击最下面<kbd>Commit new file</kbd>提交文件到仓库。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229225639083.png" alt="image-20201229225639083"></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229225731351.png" alt="image-20201229225731351"></p>
<p>然后在浏览器打开一个新的网页，输入网址<code>https://&lt;你的用户名&gt;.github.io</code>，就可以看见我们刚创建的网页，其中的内容就是刚才写的内容。说明 GitHub Pages 服务已经正常。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229230057034.png" alt="image-20201229230057034"></p>
<h2 id="三、GitHub-Pages-发布"><a href="#三、GitHub-Pages-发布" class="headerlink" title="三、GitHub Pages 发布"></a>三、GitHub Pages 发布</h2><p>上一步 “测试  GitHub Pages 页面” 中，我们在 GitHub Pages 仓库目录下新建了一个<code>index.html</code>，就可以在自己的专属网址看到这个网页了。同理我们把自己的博客生成静态 html 网页，提交到这个仓库目录下，就可以在我们的网址看到博客页面了，这就是 Hexo 框架部署博客的原理。当然，对于 Hexo 来说，提交部署只需要几条命令。</p>
<h3 id="1-配置-Git-参数"><a href="#1-配置-Git-参数" class="headerlink" title="1. 配置 Git 参数"></a>1. 配置 Git 参数</h3><p>在博客根目录下，右键，打开<kbd>Git Bash Here</kbd>。</p>
<p>配置用户名和邮箱，这两个参数用于 Git 提交时的身份识别。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 其中 username 和 username@XXX.com 是你注册 GitHub 的用户名和邮箱</span></span><br><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;username@XXX.com&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229233907818.png" alt="image-20201229233907818"></p>
<p>生成 SSH keys，主要用于Git 提交时的权限控制和加密，本地根据 RSA 算法生成公私密钥对，然后将公钥添加到 GitHub 上，本机就可以提交代码到自己的 GitHub 库了。这个是根据当前使用的电脑的一些信息生成的，所以换电脑提交时要重新生成并添加。</p>
<p>输入下面命令，然后一直按<kbd>回车</kbd>，直到结束。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 其中 username@XXX.com 是你注册 GitHub 的邮箱</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;username@XXX.com&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229233801498.png" alt="image-20201229233801498"></p>
<p>输入下面的命令，查看公钥内容，应该是一个<code>ssh-rsa</code>开头，以<code>你的邮箱</code>结尾的长字符串。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat后面的路径就是上图中的公钥文件路径，直接复制过来就可以</span></span><br><span class="line">cat /c/Users/XXX/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229234452012.png" alt="image-20201229234452012"></p>
<p>复制公钥内容（其实在<kbd>Git Bash</kbd>命令行里，默认选中文字松开鼠标就会自动把选中内容复制到剪贴板，默认鼠标中键是粘贴）。</p>
<p>打开自己的 Github 主页，点击右上角的头像，点击<kbd>Settings</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229235035462.png" alt="image-20201229235035462"></p>
<p>点击<kbd>SSH and GPG keys</kbd>，然后点击<kbd>New SSH keys</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229235220955.png" alt="image-20201229235220955"></p>
<p>Title 可以随便起一个名字，Key 填写上一步复制的公钥内容，然后点击<kbd>Add SSH key</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229235704322.png" alt="image-20201229235704322"></p>
<p>最后执行下面的命令，测试一下 Git 参数是否配置成功。出现<code>你的用户名</code>和<code>successfully</code>字样，说明配置成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面的命令什么都不用改</span></span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201230000424483.png" alt="image-20201230000424483"></p>
<h3 id="2-安装-Hexo-发布插件"><a href="#2-安装-Hexo-发布插件" class="headerlink" title="2. 安装 Hexo 发布插件"></a>2. 安装 Hexo 发布插件</h3><p>在博客根目录下，右键，打开<kbd>Git Bash Here</kbd>。</p>
<p>输入下面的命令，安装<code>hexo-deployer-git</code>。（安装失败或者卡住，参考第一篇文章修改 npm 源。）</p>
<p>这个插件用于把生成好的静态页面上传到 GitHub Pages 仓库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201230001107308.png" alt="image-20201230001107308"></p>
<h3 id="3-发布"><a href="#3-发布" class="headerlink" title="3.  发布 ! ! !"></a>3.  发布 ! ! !</h3><p>从第一篇到现在这么多步骤过去了，可以说前面的所有操作都是在为最后的这一步<code>发布</code>做准备，现在终于到了见证奇迹的时刻了。</p>
<p>先别着急激动，让我们完成最最后一步配置，我们需要告诉 hexo 发布到哪里去，也就是把文件上传到哪个仓库。</p>
<p>打开博客<code>根目录配置文件</code>(<code>D:\MyBlog\_config.yaml</code>)，拉到文件最后一行，修改为下面的配置（没有的配置项自行添加），保存。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其中 xxxxxx 是前面多次用到的你的GitHub用户名</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xxxxxx/xxxxxx.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
<p>OK，现在万事俱备了，执行下面的命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意最后变成d了，原来的s表示服务起在本地，现在的d表示部署在远端</span></span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>待命令执行完毕，打开浏览器，输入网址<code>https://你的用户名.github.io</code>，可以看到一个和第一篇中本地部署的一模一样的博客出现了。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201230002849289.png" alt="image-20201230002849289"></p>
<p>之前为了测试而发布的文章也在。<code>https://你的用户名.github.io</code>就是你的个人博客地址了，其他人都可以访问。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201230003033418.png" alt="image-20201230003033418"></p>
<h2 id="四、后续"><a href="#四、后续" class="headerlink" title="四、后续"></a>四、后续</h2><p>至此，我们从零开始搭建一个博客的任务初步完成了。</p>
<p>本篇文章介绍了利用 GitHub Pages 发布个人博客的方法，如果觉得 GitHub 访问速度太慢，可以参考下面一篇文章，基于 Gitee Pages 搭建国内博客站点。如果觉得 GitHub Pages 很满意了，可以关注本系列后续文章，会继续介绍怎么更方便地写博客、老博客迁移到新站点以及主题个性化设置等内容。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始免费搭建自己的博客(三)——基于 Gitee pages 建站</title>
    <url>/2021/01/02/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E4%B8%89)%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EGitee%20pages%E5%BB%BA%E7%AB%99/</url>
    <content><![CDATA[<blockquote>
<p>​    本文是博客搭建系列文章第三篇，其他文章链接：</p>
<ol>
<li>从零开始免费搭建自己的博客(一)——<a href="https://yushuaigee.gitee.io/2020/12/31/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%80-%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/">本地搭建 Hexo 框架</a></li>
<li>从零开始免费搭建自己的博客(二)——<a href="https://yushuaigee.gitee.io/2021/01/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%BA%8C-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-GitHub-pages-%E5%BB%BA%E7%AB%99/">基于 GitHub pages 建站</a></li>
<li><strong>从零开始免费搭建自己的博客(三)——<a href="https://yushuaigee.gitee.io/2021/01/02/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%89-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-Gitee-pages-%E5%BB%BA%E7%AB%99/">基于 Gitee pages 建站</a></strong></li>
<li>从零开始免费搭建自己的博客(四)——<a href="https://yushuaigee.gitee.io/2021/01/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E5%9B%9B)%E2%80%94%E2%80%94%E7%BC%96%E5%86%99Markdown%E6%96%87%E7%AB%A0%E5%88%A9%E5%99%A8%20Typora/">编写Markdown文章利器 Typora</a></li>
<li>从零开始免费搭建自己的博客(五)——<a href="https://yushuaigee.gitee.io/2021/01/14/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E4%BA%94)%E2%80%94%E2%80%94Typora%20+%20PicGo%20+%20GitHub%20Gitee%E5%9B%BE%E5%BA%8A/">Typora + PicGo + GitHub/Gitee图床</a></li>
<li>从零开始免费搭建自己的博客(六)——三个站点一键发布博客</li>
<li>从零开始免费搭建自己的博客(七)——迁移 CSDN 博客到个人博客站点</li>
<li>从零开始免费搭建自己的博客(八)——博客网站个性化设置及优化</li>
</ol>
</blockquote>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在第一篇文章里，我们利用 Hexo 框架在本地搭建了一个精美的博客，第二篇文章里，我们利用 GitHub 提供的免费静态网页托管服务建立了个人博客网站，将博客发布到了互联网上。</p>
<p>可是我们写博客的原因，一个是方便自己在不同的地方能直接打开网页就可以回顾知识，一个是为了方便他人查阅参考。由于国内网络环境的原因，某些地方某些时间，访问 GitHub 会比较慢，这就会导致博客无法被别人访问或者自己换个地方上网时也打不开自己的博客。</p>
<p>好消息是现在国内有和 GitHub 功能类似的 Gitee，中文名码云。之前也有注意到这个平台，当时以为他仅仅是山寨 GitHub 而已，肯定火不起来。没想到随着 GitHub 网络环境越来越差，下载个工程才几kb的速度，经常等了很久之后下载失败。有一次尝试了下将 GitHub 项目同步到 Gitee 再下载，速度直接起飞，真香。随着许多有影响力的项目加入了 Gitee ，一些大佬的博客也开始推荐使用码云了，使用的人也越来越多了。</p>
<p>当然了，使用 Gitee Pages 相对于 GitHub Pages 网速是上来了，也有很多缺点。我在实际使用过程中遇到了许多DAN疼的地方，比如每次提交需要手动更新部署，以及大于1M图片登陆后可见等，我会在下面文章中用<strong>加粗</strong>字体指出。没办法，鱼和熊掌不可兼得( ╯▽╰)。准备在第八篇讲优化的文章中尝试一种完美解决方案(GitHub + CDN加速)。</p>
<p>本篇文章介绍怎样利用 Gitee  提供的免费静态网页托管服务 Gitee Pages 建站。</p>
<h2 id="一、-Gitee-Pages-简介"><a href="#一、-Gitee-Pages-简介" class="headerlink" title="一、 Gitee Pages 简介"></a>一、 Gitee Pages 简介</h2><p>上篇说了，GitHub 设计 Pages 功能是为了让用户能设计一个图文并茂的网页作为项目首页，提升新手友好度。那么Gitee为什么要提供网页托管服务呢？应该是同样的原因，或者说是因为 GitHub 有这个功能？( ╯▽╰)</p>
<p><a href="https://gitee.com/help/articles/4136">Gitee pages 官网</a> 的介绍：Gitee Pages 是一个免费的静态网页托管服务，您可以使用 Gitee Pages 托管博客、项目官网等静态网页。如果您使用过 Github Pages 那么您会很快上手使用 Gitee 的 Pages服务。目前 Gitee Pages 支持 Jekyll、Hugo、Hexo编译静态资源。</p>
<h2 id="二、Gitee-Pages-准备"><a href="#二、Gitee-Pages-准备" class="headerlink" title="二、Gitee Pages 准备"></a>二、Gitee Pages 准备</h2><p>在发布之前，要先准备好自己的 Gitee Pages 。</p>
<p>Gitee Pages 仓库的创建方法和 GitHub 略有不同，官网的帮助文档提供了两种创建方法，第一种是直接在 Gitee 上创建仓库，第二种是直接把 GitHub 创建好的仓库同步过来。比如已经按照上一篇的方法在 GitHub 建立了博客，想在 Gitee 再搭建一次作为一个备份，可以直接用第二种方法同步过来。</p>
<h3 id="1-注册-Gitee-账号"><a href="#1-注册-Gitee-账号" class="headerlink" title="1. 注册 Gitee 账号"></a>1. 注册 Gitee 账号</h3><p>首先需要注册一个 Gitee 账号，如果已经有账号直接看下一步。</p>
<p>打开 Gitee 官网：<a href="https://gitee.com/">gitee.com</a>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231193126082.png" alt="image-20201231193126082"></p>
<p>点击右上角<kbd>注册</kbd>按钮，填写用户名，手机，验证码。也可以根据下面的选项使用其他平台账号登录。注意，此处用户名是唯一ID，建议取个有意义的名字。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231193349306.png" alt="image-20201231193349306"></p>
<h3 id="2-创建-Gitee-Pages-仓库"><a href="#2-创建-Gitee-Pages-仓库" class="headerlink" title="2. 创建 Gitee Pages 仓库"></a>2. 创建 Gitee Pages 仓库</h3><p>登录账号后，点击页面右上角的<kbd>+</kbd>，选择<kbd>新建仓库</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231193543517.png" alt="image-20201231193543517"></p>
<p>仓库名称这里建议填写<code>你的用户名</code>，这样生成出来的网页地址是比较纯净的形式，如<code>https://&lt;你的用户名&gt;.github.io</code>。当然也可以自定义名称，比如<code>blog </code>，但是这样后面生成出来的网页地址会带一个子目录，像<code>https://&lt;你的用户名&gt;.github.io/blog</code>这样。</p>
<p>仓库介绍填写仓库描述，比如 <code>jacksparrow&#39;s blog</code>等，可不填。</p>
<p>注意勾选 <code>使用Readme文件初始化这个仓库</code>，会自动创建<code>master</code>分支并生成一个 <code>readme.md</code>文件。</p>
<p>最后点击下面的<kbd>创建</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231214142085.png" alt="image-20201231214142085"></p>
<p>点击页面右上角的<kbd>服务</kbd>，选择<kbd>Gitee Pages</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231215720997.png" alt="image-20201231215720997"></p>
<p>勾选<code>强制使用HTTPS</code>，点击<kbd>启动</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231220540958.png" alt="image-20201231220540958"></p>
<h3 id="3-测试-Gitee-Pages-页面"><a href="#3-测试-Gitee-Pages-页面" class="headerlink" title="3. 测试  Gitee Pages 页面"></a>3. 测试  Gitee Pages 页面</h3><p>创建 Gitee Pages 仓库后，为了测试能否访问 Pages 服务，我们给它添加一个静态网页。</p>
<p>先点击左边的<kbd>代码</kbd>回到文件页面，然后点击<kbd>文件</kbd> – <kbd>新建文件</kbd>在仓库下新建文件。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231220911962.png" alt="image-20201231220911962"></p>
<p>输入文件名<code>index.html</code>，在下面输入内容<code>&lt;h1&gt;这是我的博客!&lt;/h1&gt;</code>，这是 html 标记语言，表示一级标题。</p>
<p>其他保持默认，点击最下面的<kbd>提交</kbd>，提交文件到仓库。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231221057010.png" alt="image-20201231221057010"></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231195353883.png" alt="image-20201231195353883"></p>
<p><strong>与 GitHub 提交自动部署不同的是，Gitee上提交后需要手动部署。</strong>(网上有许多实现了 Gitee Pages 自动部署的脚本，其实就是用脚本模拟下面的操作，可以参考)</p>
<p>点击页面右上角的<kbd>服务</kbd>，选择<kbd>Gitee Pages</kbd>回到部署界面。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231222024946.png" alt="image-20201231222024946"></p>
<p>点击下面的<kbd>更新</kbd>，下图中红框圈出的就是你的博客地址了，格式为<code>https://&lt;你的用户名&gt;.github.io</code>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231222215450.png" alt="image-20201231222215450"></p>
<p>点击博客地址或者在浏览器输入博客地址。此时就可以看见我们刚创建的网页，其中的内容就是刚才写的内容。说明 Gitee Pages 服务已经正常。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231222626659.png" alt="image-20201231222626659"></p>
<h2 id="三、Gitee-Pages-发布"><a href="#三、Gitee-Pages-发布" class="headerlink" title="三、Gitee Pages 发布"></a>三、Gitee Pages 发布</h2><p>上一步 “测试  Gitee Pages 页面” 中，我们在 Gitee Pages 仓库目录下新建了一个<code>index.html</code>，就可以在自己的专属网址看到这个网页了。同理我们把自己的博客生成静态 html 网页，提交到这个仓库目录下，就可以在我们的网址看到博客页面了，这就是 Hexo 框架部署博客的原理。当然，对于 Hexo 来说，部署提交只需要几条命令。</p>
<h3 id="1-配置-Git-参数"><a href="#1-配置-Git-参数" class="headerlink" title="1. 配置 Git 参数"></a>1. 配置 Git 参数</h3><p>过程跟上篇文章一样，已经做过的步骤不用再重复，直接到复制公钥那一步。</p>
<p>在博客根目录下，右键，打开<kbd>Git Bash Here</kbd>。</p>
<p>配置用户名和邮箱，这两个参数用于 Git 提交时的身份识别。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 其中 username 和 username@XXX.com 是你注册 Gitee 的用户名和邮箱，如果账号不是邮箱注册的话，填自己的一个邮箱地址就行了</span></span><br><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;username@XXX.com&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229233907818.png" alt="image-20201229233907818"></p>
<p>生成 SSH keys，主要用于Git 提交时的权限控制和加密，本地根据 RSA 算法生成公私密钥对，然后将公钥添加到 Gitee 上，本机就可以提交代码到自己的 GitHub 库了。这个是根据当前使用的电脑的一些信息生成的，所以换电脑提交时要重新生成并添加。</p>
<p>输入下面命令，然后一直按<kbd>回车</kbd>，直到结束。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 其中 username@XXX.com 同上，是你的注册邮箱</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;username@XXX.com&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229233801498.png" alt="image-20201229233801498"></p>
<p>输入下面的命令，查看公钥内容，应该是一个<code>ssh-rsa</code>开头，以<code>你的邮箱</code>结尾的长字符串。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat后面的路径就是上图中的公钥文件路径，直接复制过来就可以。其中XXX是你的电脑用户名。</span></span><br><span class="line">cat /c/Users/XXX/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229234452012.png" alt="image-20201229234452012"></p>
<p>复制公钥内容（其实在<kbd>Git Bash</kbd>命令行里，默认选中文字松开鼠标就会自动把选中内容复制到剪贴板，点击鼠标中键是粘贴）。</p>
<p>打开自己的 Gitee 主页，点击右上角的头像，点击<kbd>设置</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231223248489.png" alt="image-20201231223248489"></p>
<p>点击<kbd>SSH公钥</kbd>。<code>标题</code>可以随便起一个名字，<code>公钥</code>填写上一步复制的公钥内容，然后点击<kbd>确定</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231223630767.png" alt="image-20201231223630767"></p>
<p>最后执行下面的命令，测试一下 Git 参数是否配置成功。出现<code>你的用户名</code>和<code>successfully</code>字样，说明配置成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面的命令什么都不用改</span></span><br><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210101125339173.png" alt="image-20210101125339173"></p>
<h3 id="2-安装-Hexo-发布插件"><a href="#2-安装-Hexo-发布插件" class="headerlink" title="2. 安装 Hexo 发布插件"></a>2. 安装 Hexo 发布插件</h3><p>上一篇已经安装过可以跳过这一步。</p>
<p>在博客根目录下，右键，打开<kbd>Git Bash Here</kbd>。</p>
<p>输入下面的命令，安装<code>hexo-deployer-git</code>。（安装失败或者卡住，参考第一篇文章修改 npm 源。）</p>
<p>这个插件用于把生成好的静态页面上传到 Gitee Pages 仓库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201230001107308.png" alt="image-20201230001107308"></p>
<h3 id="3-发布"><a href="#3-发布" class="headerlink" title="3.  发布 ! ! !"></a>3.  发布 ! ! !</h3><p>从第一篇到现在这么多步骤过去了，可以说前面的所有操作都是在为最后的这一步<code>发布</code>做准备，现在终于到了见证奇迹的时刻了。</p>
<p>先别着急激动，让我们完成最最后一步配置，我们需要告诉 hexo 发布到哪里去，也就是把文件上传到哪个仓库。</p>
<p>打开博客<code>根目录配置文件</code>(<code>D:\MyBlog\_config.yaml</code>)，拉到文件最后一行，修改为下面的配置（没有的配置项自行添加），保存。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其中 xxxxxx 是前面多次用到的你的GitHub用户名，注意是master分支</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@gitee.com:xxxxxx/xxxxxx.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>OK，现在万事俱备了，执行下面的命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意最后变成d了，原来的s表示服务起在本地，现在的d表示部署在远端</span></span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>待命令执行完毕，还记得<strong>Gitee上提交后需要手动部署</strong>吗？此时需要按照<code>3. 测试  Gitee Pages 页面</code>的方法更新部署。</p>
<p>打开浏览器，输入网址<code>https://你的用户名.gitee.io</code>，可以看到一个和第一篇中本地部署的一模一样的博客出现了。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210102003427597.png" alt="image-20210102003427597"></p>
<p>之前为了测试而发布的文章也在。<code>https://你的用户名.gitee.io</code>就是你的个人博客地址了，其他人都可以访问。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210102003454287.png" alt="image-20210102003454287"></p>
<h2 id="四、后续"><a href="#四、后续" class="headerlink" title="四、后续"></a>四、后续</h2><p>至此，我们从零开始搭建一个博客的任务初步完成了。</p>
<p>本篇文章介绍了利用 Gitee Pages 发布个人博客的方法，如果觉得 Gitee 每次发布博客需要手动更新太麻烦，可以参考上一篇文章，基于 Github Pages 搭建博客站点。</p>
<p>我看到许多人的博客搭建好了，一直停留在一开始初始化的状态，没有新增过一篇文章，希望大家别把最重要事情忘了，我们搭网站是为了写博客，一定要坚持下去。工欲善其事，必先利其器，接下来第四篇文章，介绍怎么更方便地写 Markdown 格式的博客。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始免费搭建自己的博客(一)——本地搭建hexo框架</title>
    <url>/2020/12/31/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E4%B8%80)%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<blockquote>
<p>​    本文是博客搭建系列文章第一篇，其他文章链接：</p>
<ol>
<li><strong>从零开始免费搭建自己的博客(一)——<a href="https://yushuaigee.gitee.io/2020/12/31/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%80-%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/">本地搭建 Hexo 框架</a></strong></li>
<li>从零开始免费搭建自己的博客(二)——<a href="https://yushuaigee.gitee.io/2021/01/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%BA%8C-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-GitHub-pages-%E5%BB%BA%E7%AB%99/">基于 GitHub pages 建站</a></li>
<li>从零开始免费搭建自己的博客(三)——<a href="https://yushuaigee.gitee.io/2021/01/02/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%89-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-Gitee-pages-%E5%BB%BA%E7%AB%99/">基于 Gitee pages 建站</a></li>
<li>从零开始免费搭建自己的博客(四)——<a href="https://yushuaigee.gitee.io/2021/01/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E5%9B%9B)%E2%80%94%E2%80%94%E7%BC%96%E5%86%99Markdown%E6%96%87%E7%AB%A0%E5%88%A9%E5%99%A8%20Typora/">编写Markdown文章利器 Typora</a></li>
<li>从零开始免费搭建自己的博客(五)——<a href="https://yushuaigee.gitee.io/2021/01/14/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E4%BA%94)%E2%80%94%E2%80%94Typora%20+%20PicGo%20+%20GitHub%20Gitee%E5%9B%BE%E5%BA%8A/">Typora + PicGo + GitHub/Gitee图床</a></li>
<li>从零开始免费搭建自己的博客(六)——三个站点一键发布博客</li>
<li>从零开始免费搭建自己的博客(七)——迁移 CSDN 博客到个人博客站点</li>
<li>从零开始免费搭建自己的博客(八)——博客网站个性化设置及优化</li>
</ol>
</blockquote>
<hr>
<h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>本文思路：使用 Hexo 框架搭建网站，发布到 GitHub pages 或者 Gitee pages .</p>
<p>首先先看一下最终效果：</p>
<p>GitHub pages 链接(国际站点)：<a href="https://yushuaige.github.io/">杰克小麻雀的博客</a><br>Gitee pages 链接(国内站点)：<a href="https://yushuaigee.gitee.io/">杰克小麻雀的博客</a></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/myblog.gif" alt="myblog"></p>
<hr>
<h2 id="一、Hexo-框架简介"><a href="#一、Hexo-框架简介" class="headerlink" title="一、Hexo 框架简介"></a>一、Hexo 框架简介</h2><p>首先，都 0202 年了，我们想搭建一个网站，当然不用自己从头开始写 html，因为有许多开源的代码可以供我们选择。Hexo 就是一个专门用于博客类网站的开源项目，使用 Node.js 语言开发，GitHub 上目前已经有 31.8k 的 star 了，现在网上大多数的个人博客都是使用这个框架搭建的。Hexo不仅搭建过程简单快捷，配置灵活，可定制型非常高，因此众多大佬开发者为它开发了丰富的主题库，而作为菜鸟我们只需要选择一个符合自己审美的主题直接用就行了，当然如果你懂前端和 js ，也可以自己修改定制，或者自己制作主题并分享到互联网上。</p>
<p> Hexo 中文官网：<a href="https://hexo.io/zh-cn/">hexo.io</a> ，GitHub 地址：<a href="https://github.com/hexojs/hexo">hexojs/hexo</a> 。</p>
<h2 id="二、Hexo-依赖环境安装-：Node-js"><a href="#二、Hexo-依赖环境安装-：Node-js" class="headerlink" title="二、Hexo 依赖环境安装 ：Node.js"></a>二、Hexo 依赖环境安装 ：Node.js</h2><p>Hexo 是使用 Node.js 开发的，所以我们安装 Hexo 之前需要先安装 Node.js 环境。</p>
<p>Node.js 是什么？简单的说 Node.js 就是运行在服务端的 JavaScript 。安装了 Node.js 环境，就可以不用依赖浏览器就可以运行 js 代码，其实它也是基于 Chrome 引擎开发的一个开源项目。简单理解， Node.js 对于 js 代码的作用类似 Python 解释器对于 Python 代码的作用。</p>
<p>这里注意，不是说博客框架必须用 Node.js 来开发，博客框架本质上是一个网站，可以用任何语言开发，也有用 Python 的 Flask/Django 或者 Java 开发的博客框架，只是没有 Hexo 这么流行。</p>
<h3 id="1-官网下载-Node-js"><a href="#1-官网下载-Node-js" class="headerlink" title="1. 官网下载  Node.js"></a>1. 官网下载  Node.js</h3><p>Node.js 中文官网：<a href="https://nodejs.org/zh-cn/">nodejs.org</a></p>
<p>打开官网直接下载安装包就行了，左边是稳定版，右边是尝鲜版。任选一个点击下载，尝鲜版包含了比较新的特性，但是没有经过充分测试。我这里下载了 15.4.0 版本。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220164653416.png" alt="image-20201220164653416"></p>
<p>我这里是用浏览器自带下载器，下载速度还可以，如果没速度可以在下载按钮上右键，选择“复制链接地址”，然后粘贴到迅雷下载。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220165109254.png" alt="image-20201220165109254"></p>
<h3 id="2-安装-Node-js"><a href="#2-安装-Node-js" class="headerlink" title="2. 安装  Node.js"></a>2. 安装  Node.js</h3><p>下载完安装包后双击打开，一路点 Next 就行了。注意这一步是安装额外工具，没必要勾选。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220165451877.png" alt="image-20201220165451877"></p>
<h3 id="3-测试-Node-js-是否安装成功"><a href="#3-测试-Node-js-是否安装成功" class="headerlink" title="3. 测试 Node.js 是否安装成功"></a>3. 测试 Node.js 是否安装成功</h3><p>安装完成后，<kbd>Win</kbd> + <kbd>R</kbd> 打开运行框，输入<code>cmd</code>打开命令行窗口，输入<code>npm -v</code>回车，如果出现版本号说明安装成功。就跟安装完 Python 解释器一样，npm 就类似 Python 中的 pip 工具。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220170553434.png" alt="image-20201220170553434"></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220180008301.png" alt="image-20201220180008301"></p>
<h2 id="三、Hexo-依赖环境安装-：Git"><a href="#三、Hexo-依赖环境安装-：Git" class="headerlink" title="三、Hexo 依赖环境安装 ：Git"></a>三、Hexo 依赖环境安装 ：Git</h2><p>作为程序员，Git 应该不陌生，如果你已经安装了 Git，那这一步可以跳过。</p>
<p>Git（读音/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。简单理解就是下载代码的工具，因为 Hexo 是一个托管于 GitHub 上的开源项目，所以安装 Hexo 的时候需要使用 Git 来下载源码和依赖代码，而且后面要将自己的博客发布到 GitHub pages 或者 Gitee pages 上面也需要使用 Git。</p>
<h3 id="1-官网下载-Git"><a href="#1-官网下载-Git" class="headerlink" title="1. 官网下载  Git"></a>1. 官网下载  Git</h3><p>Git 官网：<a href="https://git-scm.com/">git</a></p>
<p>打开官网直接下载安装包就行了。由于网络环境原因，浏览器下载可能会非常慢，可以按照上面的方法，在下载按钮上右键，选择“复制链接地址”，然后粘贴到迅雷下载。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220171653488.png" alt="image-20201220171653488"></p>
<h3 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2. 安装  Git"></a>2. 安装  Git</h3><p>下载完安装包后双击打开，没有特殊需要的话，一路点 Next 就行了。安装完毕，在桌面空白处右键，可以看到多了两个选项。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220172655709.png" alt="image-20201220172655709"></p>
<h3 id="3-测试-Git-是否安装成功"><a href="#3-测试-Git-是否安装成功" class="headerlink" title="3.  测试 Git 是否安装成功"></a>3.  测试 Git 是否安装成功</h3><p>Git 安装完成后，自带了一个命令行窗口，通过上面新增的右键菜单<kbd>Git Bash Here</kbd>就可以打开，比 Windows自带的命令行要好用，后面都使用这个命令行窗口。在桌面空白处右键，选择<kbd>Git Bash Here</kbd>，输入<code>git --version</code>回车，如果出现版本号说明安装成功</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220175806607.png" alt="image-20201220175806607"></p>
<h2 id="四、安装-Hexo"><a href="#四、安装-Hexo" class="headerlink" title="四、安装 Hexo"></a>四、安装 Hexo</h2><p>下面开始正式安装 Hexo，有了前面的准备工作，安装 Hexo 就非常简单了，就跟使用 pip 安装一个 Python 第三方库一样方便。</p>
<h3 id="1-本地安装-hexo"><a href="#1-本地安装-hexo" class="headerlink" title="1. 本地安装 hexo"></a>1. 本地安装 hexo</h3><p>首先在本地新建一个空文件夹，用来存放 Hexo 的文件和以后要写的博客文件，注意不要有中文路径，避免可能出现的问题。我这里建立在 D 盘根目录，取名 MyBlog。</p>
<p>进入新建的文件夹，右键，选择<kbd>Git Bash Here</kbd>，依次输入下面的命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 hexo 框架</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化文件夹</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 hexo 依赖包</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>命令很好理解，第一行安装 hexo 模块，<code>-g</code>表示安装全局模块；第二行是 hexo 初始化，会用 <code>git clone</code>命令去 GitHub 下载一个 hexo 默认模板代码库；第三行是安装依赖包，类似安装 pip 的 requirement 文件，会根据刚下载的代码库中的配置文件，下载并安装所需依赖包。安装成功结果，如下图。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220175707251.png" alt="image-20201220175707251"></p>
<h3 id="2-可能遇到的问题"><a href="#2-可能遇到的问题" class="headerlink" title="2. 可能遇到的问题"></a>2. 可能遇到的问题</h3><ul>
<li><p><strong><code>npm install -g hexo-cli</code>命令执行卡住，或者报错连接不上</strong></p>
<p>可能是 npm 源速度太慢，可以尝试修改淘宝源解决，再重新执行安装命令。npm 源的概念就和 Python 中的 pip 源一样，默认源是<code>https://registry.npmjs.org/</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 npm 源</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="meta">#</span><span class="bash"> 临时修改 npm 源安装 hexo (仅本条命令有效)</span></span><br><span class="line">npm --registry=https://registry.npm.taobao.org install -g hexo-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者永久修改 npm 源</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>如果是公司内网使用代理访问外网 (比如<code>ping registry.npmjs.org</code> <code>ping registry.npm.taobao.org</code>都不通)，可以尝试给 npm 配置代理解决，再重新执行安装命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置代理</span></span><br><span class="line">npm config set proxy http://serverip:port</span><br><span class="line">npm confit set https-proxy http:/serverip:port</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置带用户名密码的代理</span></span><br><span class="line">npm config set proxy http://username:password@serverip:port</span><br><span class="line">npm confit set https-proxy http://username:password@serverip:port</span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消代理</span></span><br><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure></li>
<li><p><strong><code>hexo init</code>命令执行卡住，或者报错连接不上</strong></p>
<p>如果是公司内网使用代理访问外网 (比如<code>ping GitHub.com</code> 不通)，可以尝试给 git 配置代理解决，再重新执行初始化命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置代理</span></span><br><span class="line">git config --global http.proxy http://serverip:port</span><br><span class="line">git config --global https.proxy http:/serverip:port</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置带用户名密码的代理</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：如果密码中带了特殊字符需要进行转义, 将特殊字符替换为下面对应的转义字符即可</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  !   <span class="comment">#   $   &amp;   &#x27;   (    )  *   +   ,   /   :   ;   =   ?   @   [   ]</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> %21 %23 %24 %26 %27 %28 %29 %2A %2B %2C %2F %3A %3B %3D %3F %40 %5B %5D</span></span><br><span class="line">npm config set proxy http://username:password@serverip:port</span><br><span class="line">npm confit set https-proxy http://username:password@serverip:port</span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消代理</span></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
<h3 id="3-本地博客效果"><a href="#3-本地博客效果" class="headerlink" title="3. 本地博客效果"></a>3. 本地博客效果</h3></li>
</ul>
<p>前面三条命令执行成功，Hexo 框架在本地就已经搭建好了，下面看看效果。</p>
<p>还是在<kbd>Git Bash</kbd>命令行窗口里，依次执行下面的命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成静态网站</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务器</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>或者直接执行<code>hexo g &amp;&amp; hexo s</code>，其中<code>hexo g</code>是 <code>hexo generate</code>命令的简写，<code>hexo s</code>是 <code>hexo server</code>命令的简写。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220204316929.png" alt="image-20201220204316929"></p>
<p>此时，打开浏览器，输入网址<code>http://localhost:4000/</code>，就可以看到我们 Hexo 搭建的博客示例了。此时是默认主题，比较简洁，下一步我们换一个更精美的主题。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220204625063.png" alt="image-20201220204625063"></p>
<h2 id="五、更换-Hexo-博客主题"><a href="#五、更换-Hexo-博客主题" class="headerlink" title="五、更换 Hexo  博客主题"></a>五、更换 Hexo  博客主题</h2><h3 id="1-如何找主题"><a href="#1-如何找主题" class="headerlink" title="1. 如何找主题"></a>1. 如何找主题</h3><p>默认主题非常简洁，适合大佬使用，像我等菜鸟，自己不会做却又想使用花里胡哨的主题，就要学会找主题了。</p>
<p>下面是我寻找主题的三个方法。</p>
<ul>
<li><p><strong>官方网站</strong></p>
<p>Hexo 官网收录了几百个第三方主题，其中有许多中文开发者开发的主题。</p>
<p>在 Hexo 官网点击“主题”，或者直接进入 Hexo 主题页：<a href="https://hexo.io/themes/">themes</a></p>
<p>通过上方的搜索框可以根据标签搜索。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201222231238616.png" alt="image-20201222231238616"></p>
</li>
<li><p><strong>Github 搜索</strong></p>
<p>大多数流行的主题都在 GitHub 托管开源了，我们可以直接去 GitHub  下载。</p>
<p>在 Github 官网搜索<code>hexo-theme</code>，选择<code>All GitHub</code>，或者直接进入搜索页：<a href="https://github.com/search?q=hexo-theme">search?q=hexo-theme</a></p>
<p>点击右上角<code>Sort</code>可以选择按<code>Most stars</code>数量排序，根据流行程度找到心仪的主题。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201222231133883.png" alt="image-20201222231133883"></p>
</li>
<li><p><strong>网上搜索</strong></p>
<p>直接在搜索引擎搜索<code>Hexo主题推荐</code>，会有许多别人推荐的主题，不过大多数的推荐前面两种方法都能覆盖到，偶尔也能发现一些冷门却又戳中你的审美的宝藏，这就看耐心和运气了。</p>
</li>
</ul>
<h3 id="2-主题推荐"><a href="#2-主题推荐" class="headerlink" title="2. 主题推荐"></a>2. 主题推荐</h3><p>我挑选了几个自己觉得简单美观而又不过分花哨的主题，其实都是 GitHub 热门的，很好发现。这些主题都太漂亮了，以至于我都不知道该选哪个，额。</p>
<p>下面几个主题切换时可能会遇到一些问题，多数是依赖包未安装完整的原因，解决办法见<code>4. 出错解决办法</code>。</p>
<ul>
<li><p><strong>Next</strong></p>
<p>Demo 示例：<a href="https://theme-next.js.org/">NexT</a> | <a href="https://dandyxu.me/">Dandy</a> | <a href="https://raincal.com/">Raincal</a> </p>
<p>GitHub 主页：<a href="https://github.com/iissnan/hexo-theme-next">hexo-theme-next</a></p>
<p>这个是 Hexo 最流行的主题，GitHub 上 15.5k stars，在 Hexo 主题中排行第一。</p>
<p>这个主题跟默认主题一样简洁，但是却漂亮了很多，尤其是文章浏览界面，排版非常干净舒服，大佬必备。</p>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201221224929253.png" alt="image-20201221224929253"></p>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201221222603632.png" alt="image-20201221222603632"></p>
<hr>
</li>
</ul>
<ul>
<li><p><strong>stun</strong></p>
<p>Demo 示例：<a href="https://liuyib.github.io/">Liuyib’s Blog</a></p>
<p>GitHub 主页：<a href="https://github.com/liuyib/hexo-theme-stun">hexo-theme-stun</a></p>
<p>这是一个漂亮、简洁的 Hexo 主题，增加了首页图片，和白天黑夜模式，最重要的是文章浏览界面非常干净美观。我就是看到一篇博客使用的这个主题，特别漂亮，才有了想自己搭博客的强烈愿望。</p>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/test-1608904463540.gif" alt="test"></p>
<hr>
<p>文章浏览界面：</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/test-1608904209387.gif" alt="test"></p>
<hr>
</li>
</ul>
<ul>
<li><p><strong>matery</strong></p>
<p>Demo 示例：<a href="http://blinkfox.com/">闪烁之狐</a></p>
<p>GitHub 主页：<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></p>
<p>同样是一个很漂亮的主题，除了首页的图片，它会为每一篇文章添加一张非常漂亮的封面图，而且集成了很多强大的功能插件，比喻词云，访问统计，音乐播放，视频播放，在线聊天等等。</p>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/test-1608995730975.gif" alt="test"></p>
<hr>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/test-1608995969178.gif" alt="test"></p>
<hr>
</li>
</ul>
<ul>
<li><p><strong>butterfly</strong></p>
<p>Demo 示例： <a href="https://butterfly.js.org/">Butterfly</a> |  <a href="https://jerryc.me/">JerryC</a></p>
<p>GitHub 主页：<a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a></p>
<p>这个主题和上面这个同样强大、漂亮，且色彩更加丰富。</p>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201226233544278.png" alt="image-20201226233544278"></p>
<hr>
<p>![Butterfly - A Simple and Card UI Design theme for ](<a href="https://yushuaigee.gitee.io/myblog/img/Butterfly">https://yushuaigee.gitee.io/myblog/img/Butterfly</a> - A Simple and Card UI Design theme for .png)</p>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/test-1608997237304.gif" alt="test"></p>
<hr>
</li>
</ul>
<ul>
<li><p><strong>ayer</strong></p>
<p>Demo 示例：<a href="https://shen-yu.gitee.io/">岛</a></p>
<p>GitHub 主页：<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-ayer</a></p>
<p>这个主题在这几个里面算是最小众的，但是功能却不少，界面比较简洁，我就选择了这一款主题。</p>
<hr>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/test-1608998694257.gif" alt="test"></p>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/test-1608998820660.gif" alt="test"></p>
<hr>
</li>
</ul>
<h3 id="3-更换主题"><a href="#3-更换主题" class="headerlink" title="3. 更换主题"></a>3. 更换主题</h3><p>以 <strong>ayer</strong> 主题为例。</p>
<p>在 Hexo 博客根目录(<code>D:\MyBlog</code>)下，右键，选择<code>Git Bash Here</code>，执行下面命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载主题仓库到 themes 文件夹， git <span class="built_in">clone</span> &lt;仓库地址&gt; themes/&lt;主题名&gt;</span> </span><br><span class="line">git clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure>
<p>其中，&lt;仓库地址&gt;可以在每个主题的 GitHub 主页获取到。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201222231736247.png" alt="image-20201222231736247"></p>
<p>此时打开博客根目录下的 themes 文件夹可以看到多了个 ayer 文件夹。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201222231910652.png" alt="image-20201222231910652"></p>
<p>然后用记事本打开博客根目录下的 _config.yml (<code>D:\MyBlog\_config.yml</code>)，找到<code>theme</code>标签，默认值是<code>landscape</code>主题，把它改为要更换的主题名字<code>ayer</code>，然后执行启动命令。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">ayer</span></span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理 &amp;&amp; 生成 &amp;&amp; 启动</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201222232806309.png" alt="image-20201222232806309"></p>
<p>此时再到浏览器打开网址<code>http://localhost:4000</code>，可以看到我们的博客已经换上一款非常精美的主题。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/Hexo-1608650994521.png" alt="Hexo"></p>
<h3 id="4-出错解决办法"><a href="#4-出错解决办法" class="headerlink" title="4. 出错解决办法"></a>4. 出错解决办法</h3><ul>
<li><p><strong>Next</strong></p>
<p>打开网页<code>http://localhost:4000</code>出现下面的错误，是因为没有安装依赖库<code>hexo-renderer-swig</code></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201221221407462.png" alt="image-20201221221407462"></p>
<p>先 <kbd>Ctrl</kbd> + <kbd>C</kbd> 停止，执行下面命令安装swig，再执行<code>hexo g &amp;&amp; hexo s</code>重新发布。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-swig</span><br></pre></td></tr></table></figure></li>
<li><p><strong>stun</strong></p>
<p>打开网页<code>http://localhost:4000</code>出现下面的错误，是因为没有安装依赖库<code>hexo-renderer-pug</code></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201221223418827.png" alt="image-20201221223418827"></p>
<p>先 <kbd>Ctrl</kbd> + <kbd>C</kbd> 停止，执行下面命令安装pug，再执行<code>hexo g &amp;&amp; hexo s</code>重新发布。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug</span><br></pre></td></tr></table></figure>
<h3 id="5-修改主题"><a href="#5-修改主题" class="headerlink" title="5. 修改主题"></a>5. 修改主题</h3></li>
</ul>
<p>更换主题后，我们需要修改一些基本属性，比如博客名字、首页图片等，或者增加一些个性化属性，比如鼠标指针样式，雪花特效，点击特效等。本篇文章先介绍一下如何修改基本属性，以便于接下来发布网站，在本系列文章第七篇再介绍高级的个性化设置。</p>
<p>Hexo 的配置大部分都保存在博客根目录下的<code>_config.yml</code>文件，我这里是<code>D:\MyBlog\_config.yml</code>，我们叫它<code>根目录配置文件</code>，直接修改这个文件就可以更改博客的一些设置，像前面更换主题就是修改这个文件的参数实现的。关于这个文件的每个参数的详细意义，可以在 <a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>里查看，每一个参数都有示例，讲解的非常详细。</p>
<p>此外，下载的第三方主题的根目录下也有一个<code>_config.yml</code>文件，比如 <strong>ayer</strong> 主题，我这里就是<code>D:\MyBlog\themes\ayer\_config.yml</code>文件，我们叫它<code>主题配置文件</code>。关于这个文件每个参数的详细意义，可以在每个主题的 GitHub 主页看到详细说明。</p>
<p>如果你使用的是自带的默认主题，那么所有配置都应该在<code>根目录配置文件</code>修改。如果是用的是第三方那个主题，需要两个文件配合修改。</p>
<p>以 <strong>ayer</strong> 主题为例。</p>
<p>首先，按上面第3步更换主题的方法，将<code>根目录配置文件</code>的 theme 属性设置为对应的主题名字 <code>ayer</code>。打开<code>根目录配置文件</code>(D:\MyBlog_config.yml)。</p>
<p>修改第6/10/11行，修改博客基本信息。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 博客标题，冒号后面自定义</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">半亩方塘</span></span><br><span class="line"><span class="comment"># 博客作者，冒号后面自定义</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">杰克小麻雀</span></span><br><span class="line"><span class="comment"># 网站语言，zh-CN 表示中文，en表示英文。不改成 zh-CN，某些浏览器总会提示是否需要翻译网页</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>
<p>然后，参考 <strong>ayer</strong> 主题官方帮助文档 <a href="https://shen-yu.gitee.io/2019/ayer/">Ayer中文说明</a>。打开 <strong>ayer</strong> 主题的<code>主题配置文件</code>(D:\MyBlog\themes\ayer_config.yml)。</p>
<p>修改第 2 ~ 10行，关掉不需要的侧边栏。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags</span></span><br><span class="line"><span class="comment">#  旅行: /tags/旅行/</span></span><br><span class="line"><span class="comment">#  摄影: http://shenyu-vip.lofter.com</span></span><br><span class="line"><span class="comment">#  友链: /friends</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/2019/about</span></span><br></pre></td></tr></table></figure>
<p>修改第 14 ~ 18行，自定义首页滚动显示的标题。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启动效</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">欢迎来到杰克小麻雀的博客</span></span><br><span class="line">  <span class="attr">text2:</span> <span class="string">临渊羡鱼，不如退而结网</span> </span><br><span class="line">  <span class="attr">text3:</span> <span class="string">问渠哪得清如许,为有源头活水来</span></span><br></pre></td></tr></table></figure>
<p>修改第 26 ~ 27行，修改网站图标和侧边栏logo。只需要把自己的图标文件按覆盖原来的文件，完整目录为<code>‪D:\MyBlog\themes\ayer\source\favicon.ico</code>。关于图标，推荐一个可以下载各种尺寸图标的网站： <a href="https://www.easyicon.net/">easyicon</a>，也可以把自己准备好的图片进行在线格式转换： <a href="https://convertio.co/zh/ico-converter/">在线ico转换</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 浏览器标签栏显示图标</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span> </span><br><span class="line"><span class="comment"># 首页侧边栏图标</span></span><br><span class="line"><span class="attr">logo:</span> <span class="string">/favicon.ico</span></span><br></pre></td></tr></table></figure>
<p>修改第 31 ~ 34行，更换封面为自己的图片。先将自己准备好的封面图片 <code>cover8.jpg</code> 放到<code>D:\MyBlog\themes\ayer\source\images</code>目录下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/images/cover8.jpg</span></span><br><span class="line">  <span class="attr">logo:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>第 125 行，关闭右上角的 GitHub forkme。在这个背景下有点丑。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">github:</span></span><br><span class="line">  <span class="comment"># (关闭请设置为false)</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/Shen-Yu/hexo-theme-ayer</span></span><br></pre></td></tr></table></figure>
<p>第 83 行，关闭打赏。如果不改下面的图片，你的打赏就直接给主题作者了哦，我没有改打赏图片，所以直接关了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reward_type: 0</span><br></pre></td></tr></table></figure>
<p>以上只修改了一些最最基本的配置，毕竟先发布网站要紧，其他配置可以慢慢来，建议看一下主题配置文件的每一行注释以及官方文档。</p>
<p>改完后，执行<code>hexo g &amp;&amp; hexo s</code>，刷新网页看下效果：</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201227192058171.png" alt="image-20201227192058171"></p>
<h2 id="六、本地发布文章"><a href="#六、本地发布文章" class="headerlink" title="六、本地发布文章"></a>六、本地发布文章</h2><p>博客搭建好了，可是现在只有示例的<code>Hello World</code>一篇文章，怎么发布自己的文章呢？</p>
<h3 id="1-新建文章"><a href="#1-新建文章" class="headerlink" title="1. 新建文章"></a>1. 新建文章</h3><p>在博客根目录下右键，选择<kbd>Git Bash Here</kbd>，输入下面命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;我的第一篇博客&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201227193541930.png" alt="image-20201227193541930"></p>
<p>此时进入博客根目录下的<code>source\_posts</code>(D:\MyBlog\source_posts)文件夹，可以看到多了一个<code>我的第一篇博客.md</code>文件，这便是新生成的博客文章，因为 Hexo 默认使用 Markdown 格式，所以文件后缀是md，可以使用记事本或者<code>Typora</code>打开并编辑。关于 Markdown 语法和<code>Typora</code>软件的使用，将在本系列文章第四篇中介绍。</p>
<p>此时先 <kbd>Ctrl</kbd> + <kbd>C</kbd> 停止服务器，执行<code>hexo g &amp;&amp; hexo s</code>重新部署，刷新<code>http://localhost:4000/</code>，可以看到博客上多了一篇文章。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201227195815659.png" alt="image-20201227195815659"></p>
<h3 id="2-修改模板"><a href="#2-修改模板" class="headerlink" title="2. 修改模板"></a>2. 修改模板</h3><p>打开新建的文章<code>我的第一篇博客.md</code>，可以看到它并不是空的，可是页面上却显示为空，因为 Hexo 根据默认模板帮我们自动生成了一些参数，比如文章创建时间等。这个模板是可更改的。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201227194608547.png" alt="image-20201227194608547"></p>
<p>这就需要修改<code>根目录配置文件</code>(‪D:\MyBlog_config.yml)的<code>new_post_name</code>参数了，其中year month day 分别表示创建文章的年月日，这样，再新建文章时，文件名将会自动加上年月日信息，便于通过日期来管理文章。当然，这个时间后面也是可以修改的。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year-:month-:day-:title.md</span></span><br></pre></td></tr></table></figure>
<p>编辑上面打开的文章<code>我的第一篇博客.md</code>，添加一些正文，并改一下自动生成三个参数。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201227201533968.png" alt="image-20201227201533968"></p>
<p>此时先 <kbd>Ctrl</kbd> + <kbd>C</kbd> 停止服务器，执行<code>hexo g &amp;&amp; hexo s</code>重新部署，刷新<code>http://localhost:4000/</code>，看看效果。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201227201741602.png" alt="image-20201227201741602"></p>
<h2 id="七、后续"><a href="#七、后续" class="headerlink" title="七、后续"></a>七、后续</h2><p>至此，我们的博客已经基本可以用了，只是现在还部署在本地，其实本地的效果就是发布的效果，后面只把这一整套文件都部署到远程服务器上就可以了，针不戳。第一部分说了， 0202 年我们想搭建一个网站不用自己从头开始写 html，有 Hexo 这么优秀的框架供我们选择，而且还完全免费，那么部署网站怎么办呢？</p>
<p>毕竟马上就要 2021 年了，现在部署网站也不用买服务器啦，有 GitHub Page 和 Gitee Page 等免费服务可供我们选择，只需要注册一个帐号就可以了。虽然 GitHub 在程序员界是最流行的，但是由于网络环境原因访问速度很慢，再加上最近的形势变化，说不定哪天这网站甚至会打不开了，所以国内平台Gitee成了一个不错的选择。</p>
<p>网站部署步骤详情见本系列文章的第二篇和第三篇，这两个步骤只需任选其一即可。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始免费搭建自己的博客(四)——编写Markdown文章利器 Typora</title>
    <url>/2021/01/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E5%9B%9B)%E2%80%94%E2%80%94%E7%BC%96%E5%86%99Markdown%E6%96%87%E7%AB%A0%E5%88%A9%E5%99%A8%20Typora/</url>
    <content><![CDATA[<blockquote>
<p>​    本文是博客搭建系列文章第四篇，其他文章链接：</p>
<ol>
<li>从零开始免费搭建自己的博客(一)——<a href="https://yushuaige.github.io/2020/12/31/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%80-%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/">本地搭建 Hexo 框架</a></li>
<li>从零开始免费搭建自己的博客(二)——<a href="https://yushuaige.github.io/2021/01/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%BA%8C-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-GitHub-pages-%E5%BB%BA%E7%AB%99/">基于 GitHub pages 建站</a></li>
<li>从零开始免费搭建自己的博客(三)——<a href="https://yushuaige.github.io/2021/01/02/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%89-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-Gitee-pages-%E5%BB%BA%E7%AB%99/">基于 Gitee pages 建站</a></li>
<li><strong>从零开始免费搭建自己的博客(四)——<a href="https://yushuaigee.gitee.io/2021/01/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E5%9B%9B)%E2%80%94%E2%80%94%E7%BC%96%E5%86%99Markdown%E6%96%87%E7%AB%A0%E5%88%A9%E5%99%A8%20Typora/">编写Markdown文章利器 Typora</a></strong></li>
<li>从零开始免费搭建自己的博客(五)——<a href="https://yushuaigee.gitee.io/2021/01/14/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E4%BA%94)%E2%80%94%E2%80%94Typora%20+%20PicGo%20+%20GitHub%20Gitee%E5%9B%BE%E5%BA%8A/">Typora + PicGo + GitHub/Gitee图床</a></li>
<li>从零开始免费搭建自己的博客(六)——三个站点一键发布博客</li>
<li>从零开始免费搭建自己的博客(七)——迁移 CSDN 博客到个人博客站点</li>
<li>从零开始免费搭建自己的博客(八)——博客网站个性化设置及优化</li>
</ol>
</blockquote>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面我们利用 Hexo 框架搭建了自己的博客网站，可以注意到 Hexo 默认是使用 Markdown 格式的文件的，所以在写新博客之前，我们要先了解一下  Markdown 语法 。</p>
<p>其实我在上大学时也听说过 Markdown，但是一直以为很麻烦，所以之前在 CSDN 的博客都是用富文本编辑器写的，直到在公司试着写了一篇 Markdown 格式的资料，才领略到它的魅力，要不说一个东西这么流行一定有它的道理呢。平时经常看到推荐 Markdown 的文章，都会提到”让你全程双手不离开键盘就可以写出带格式的文章”，我不以为然：我点几下鼠标就能编辑出很美观的格式，也没浪费多少时间啊，何必为了写文章去学一个新的语法呢？</p>
<p>开始用 Markdown 后，我发现选择 Markdown 起码有这些好处：</p>
<ul>
<li>一次编写，到处编辑，不会出现不同版本word显示效果不同的情况。</li>
<li>语法并不麻烦，从零基础到会使用，十分钟足矣。</li>
<li>简洁且漂亮。我也说不上来为啥，可能是因为程序员更懂程序员的审美吧。</li>
<li>有Typora这样的编辑器。这真是一个很大的加分项，如果你用过其他软件写 Markdown 就知道了。</li>
</ul>
<p>本文先介绍 Markdown 语法，再介绍下 Typora 软件的安装和使用。想必使用 Markdown 写文章的人没有不知道 Typora 的，为了系列文章的完整性还是写一篇，主要介绍下我个人觉得比较方便的使用技巧。</p>
<h2 id="一-、使用-Markdown"><a href="#一-、使用-Markdown" class="headerlink" title="一 、使用 Markdown"></a>一 、使用 Markdown</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>创始人 John Gruber 在2004 创造了Markdown语言。 Markdown是一种轻量级标记语言，这个语言的目的是希望大家使用“易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的HTML。</p>
<p>更通俗的解释：我们之所以不用记事本而用 Microsoft Word 写文章，是因为在 Word 里，我们可以用鼠标设置各种标题、字体加粗等格式以及插入表格、插入图片等功能，使文章更加美观易读。而使用 Markdown 语法，在纯文本编辑器中也可以快速写出格式丰富且又美观的文章，手不用离开键盘。</p>
<p>什么叫标记语言，比如在 html 中，用<code>&lt;h1&gt;标题内容&lt;/h1&gt;</code>的形式来标记文字显示的格式，支持 html 解析的软件(浏览器)，读到<code>&lt;h1&gt;</code>就知道这是一个一级标题，然后就把它的字体渲染大一点。Markdown 也是类似的道理，不过作者让标记方法更简单更易读，例如想标记标题就用<code># 标题内容</code>这种形式，我们写文章时随手就能敲出来。当然，想要看到显示效果也需要在支持 Markdown 解析的软件中打开。</p>
<h3 id="十分钟学会-Markdown-语法"><a href="#十分钟学会-Markdown-语法" class="headerlink" title="十分钟学会 Markdown 语法"></a>十分钟学会 Markdown 语法</h3><p>我之所以没有把”十分钟学会…”放在标题里，是因为我这个方法是真的只需要十分钟，我就是这样做的。</p>
<p>下面代码块里的这段文字是 CSDN 的 Markdown 编辑器的新手示例帮助，基本包含了所有的 Markdown 用法，我们只需要在新建一个<code>Markdown示例.md</code>文件，把下面这段话复制进去保存，再用支持md格式的软件(比如后文介绍的Typora)打开，所有的效果所见即所得。先大概浏览一下有哪些效果，写自己的文章时，想用哪种效果直接在示例里面复制源码粘贴到自己的文件再修改就行了。</p>
<p>用这个方法写上一两篇文章，下次再写的时候就不用再参考示例了。因为我们本质上是用语法写文章，没必要上来先背 Markdown 语法，不会的可以现查。就跟学英语不能单纯的背单词而是要多看文章一个道理。</p>
<p>比如，写文章时想用一个按键的效果，就可以到示例文件中找到并复制过来修改一下：</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/md_demo.gif" alt="md_demo"></p>
<p>示例内容：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">@[<span class="string">TOC</span>](<span class="link">这里写自定义目录标题</span>)</span><br><span class="line"></span><br><span class="line"><span class="section"># 欢迎使用Markdown编辑器</span></span><br><span class="line"></span><br><span class="line">你好！ 这是你第一次使用 <span class="strong">**Markdown编辑器**</span> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</span><br><span class="line"></span><br><span class="line"><span class="section">## 新的改变</span></span><br><span class="line"></span><br><span class="line">我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</span><br><span class="line"></span><br><span class="line"><span class="bullet">  1.</span> <span class="strong">**全新的界面设计**</span> ，将会带来全新的写作体验；</span><br><span class="line"><span class="bullet">  2.</span> 在创作中心设置你喜爱的代码高亮样式，Markdown <span class="strong">**将代码片显示选择的高亮样式**</span> 进行展示；</span><br><span class="line"><span class="bullet">  3.</span> 增加了 <span class="strong">**图片拖拽**</span> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</span><br><span class="line"><span class="bullet">  4.</span> 全新的 <span class="strong">**KaTeX数学公式**</span> 语法；</span><br><span class="line"><span class="bullet">  5.</span> 增加了支持<span class="strong">**甘特图的mermaid语法[^1]**</span> 功能；</span><br><span class="line"><span class="bullet">  6.</span> 增加了 <span class="strong">**多屏幕编辑**</span> Markdown文章功能；</span><br><span class="line"><span class="bullet">  7.</span> 增加了 <span class="strong">**焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置**</span> 等功能，功能按钮位于编辑区域与预览区域中间；</span><br><span class="line"><span class="bullet">  8.</span> 增加了 <span class="strong">**检查列表**</span> 功能。</span><br><span class="line"></span><br><span class="line">[<span class="string">^1</span>]: [<span class="string">mermaid语法说明</span>](<span class="link">https://mermaidjs.github.io/</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">## 功能快捷键</span></span><br><span class="line"></span><br><span class="line">撤销：<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl/Command<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Z<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br><span class="line">重做：<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl/Command<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Y<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br><span class="line">加粗：<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl/Command<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>B<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br><span class="line">斜体：<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl/Command<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>I<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br><span class="line">标题：<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl/Command<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Shift<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>H<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br><span class="line">无序列表：<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl/Command<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Shift<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>U<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br><span class="line">有序列表：<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl/Command<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Shift<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>O<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br><span class="line">检查列表：<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl/Command<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Shift<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>C<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br><span class="line">插入代码：<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl/Command<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Shift<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>K<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br><span class="line">插入链接：<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl/Command<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Shift<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>L<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br><span class="line">插入图片：<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl/Command<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Shift<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>G<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br><span class="line">查找：<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl/Command<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>F<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br><span class="line">替换：<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl/Command<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>G<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 合理的创建标题，有助于目录的生成</span></span><br><span class="line"></span><br><span class="line">直接输入1次<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>#<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>，并按下<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>space<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>后，将生成1级标题。</span><br><span class="line">输入2次<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>#<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>，并按下<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>space<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>后，将生成2级标题。</span><br><span class="line">以此类推，我们支持6级标题。有助于使用<span class="code">`TOC`</span>语法后生成一个完美的目录。</span><br><span class="line"></span><br><span class="line"><span class="section">## 如何改变文本的样式</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">*强调文本*</span> <span class="emphasis">_强调文本_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**加粗文本**</span> <span class="strong">__加粗文本__</span></span><br><span class="line"></span><br><span class="line">==标记文本==</span><br><span class="line"></span><br><span class="line">~~删除文本~~</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 引用文本</span></span><br><span class="line"></span><br><span class="line">H~2~O is是液体。</span><br><span class="line"></span><br><span class="line">2^10^ 运算结果是 1024.</span><br><span class="line"></span><br><span class="line"><span class="section">## 插入链接与图片</span></span><br><span class="line"></span><br><span class="line">链接: [<span class="string">link</span>](<span class="link">https://www.csdn.net/</span>).</span><br><span class="line"></span><br><span class="line">图片: ![<span class="string">Alt</span>](<span class="link">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</span>)</span><br><span class="line"></span><br><span class="line">带尺寸的图片: ![<span class="string">Alt</span>](<span class="link">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30</span>)</span><br><span class="line"></span><br><span class="line">居中的图片: ![<span class="string">Alt</span>](<span class="link">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</span>)</span><br><span class="line"></span><br><span class="line">居中并且带尺寸的图片: ![<span class="string">Alt</span>](<span class="link">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30</span>)</span><br><span class="line"></span><br><span class="line">当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</span><br><span class="line"></span><br><span class="line"><span class="section">## 如何插入一段漂亮的代码片</span></span><br><span class="line"></span><br><span class="line">去[<span class="string">博客设置</span>](<span class="link">https://mp.csdn.net/console/configBlog</span>)页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <span class="code">`代码片`</span>.</span><br><span class="line"></span><br><span class="line">​<span class="code">```javascript</span></span><br><span class="line"><span class="code">// An highlighted block</span></span><br><span class="line"><span class="code">var foo = &#x27;bar&#x27;;</span></span><br><span class="line"><span class="code">​```</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 生成一个适合你的列表</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 项目</span><br><span class="line"><span class="bullet">  -</span> 项目</span><br><span class="line"><span class="bullet">    -</span> 项目</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 项目1</span><br><span class="line"><span class="bullet">2.</span> 项目2</span><br><span class="line"><span class="bullet">3.</span> 项目3</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [ ] 计划任务</span><br><span class="line"><span class="bullet">-</span> [x] 完成任务</span><br><span class="line"></span><br><span class="line"><span class="section">## 创建一个表格</span></span><br><span class="line"></span><br><span class="line">一个简单的表格是这么创建的：</span><br><span class="line"></span><br><span class="line">| 项目 | Value |</span><br><span class="line">| ---- | ----- |</span><br><span class="line">| 电脑 | $1600 |</span><br><span class="line">| 手机 | $12   |</span><br><span class="line">| 导管 | $1    |</span><br><span class="line"></span><br><span class="line"><span class="section">### 设定内容居中、居左、居右</span></span><br><span class="line"></span><br><span class="line">使用<span class="code">`:---------:`</span>居中</span><br><span class="line">使用<span class="code">`:----------`</span>居左</span><br><span class="line">使用<span class="code">`----------:`</span>居右</span><br><span class="line"></span><br><span class="line">|     第一列     |         第二列 | 第三列         |</span><br><span class="line">| :------------: | -------------: | :------------- |</span><br><span class="line">| 第一列文本居中 | 第二列文本居右 | 第三列文本居左 |</span><br><span class="line"></span><br><span class="line"><span class="section">### SmartyPants</span></span><br><span class="line"></span><br><span class="line">SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：</span><br><span class="line">|    TYPE   |ASCII                          |HTML</span><br><span class="line">|----------------|-------------------------------|-----------------------------|</span><br><span class="line">|Single backticks|<span class="code">`&#x27;Isn&#x27;t this fun?&#x27;`</span>            |&#x27;Isn&#x27;t this fun?&#x27;            |</span><br><span class="line">|Quotes          |<span class="code">`&quot;Isn&#x27;t this fun?&quot;`</span>            |&quot;Isn&#x27;t this fun?&quot;            |</span><br><span class="line">|Dashes          |<span class="code">`-- is en-dash, --- is em-dash`</span>|-- is en-dash, --- is em-dash|</span><br><span class="line"></span><br><span class="line"><span class="section">## 创建一个自定义列表</span></span><br><span class="line"></span><br><span class="line">Markdown</span><br><span class="line">:  Text-to-HTML conversion tool</span><br><span class="line"></span><br><span class="line">Authors</span><br><span class="line">:  John</span><br><span class="line">:  Luke</span><br><span class="line"></span><br><span class="line"><span class="section">## 如何创建一个注脚</span></span><br><span class="line"></span><br><span class="line">一个具有注脚的文本。[^2]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^2</span>]: <span class="link">注脚的解释</span></span><br><span class="line"></span><br><span class="line"><span class="section">##  注释也是必不可少的</span></span><br><span class="line"></span><br><span class="line">Markdown将文本转换为 HTML。</span><br><span class="line"></span><br><span class="line"><span class="emphasis">*[HTML]:   超文本标记语言</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## KaTeX数学公式</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">您可以使用渲染LaTeX数学表达式 [<span class="string">KaTeX</span>](<span class="link">https://khan.github.io/KaTeX/</span>):</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">Gamma公式展示 $\Gamma(n) = (n-1)!\quad\forall</span></span><br><span class="line"><span class="emphasis">n\in\mathbb N$ 是通过欧拉积分</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">$$</span></span><br><span class="line"><span class="emphasis">\Gamma(z) = \int_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt\,.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&gt; 你可以找到更多关于的信息 <span class="strong">**LaTeX**</span> 数学表达式[<span class="string">here</span>][<span class="symbol">1</span>].</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## 新的甘特图功能，丰富你的文章</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">​```mermaid</span></span><br><span class="line"><span class="emphasis">gantt</span></span><br><span class="line"><span class="emphasis">        dateFormat  YYYY-MM-DD</span></span><br><span class="line"><span class="emphasis">        title Adding GANTT diagram functionality to mermaid</span></span><br><span class="line"><span class="emphasis">        section 现有任务</span></span><br><span class="line"><span class="emphasis">        已完成               :done,    des1, 2014-01-06,2014-01-08</span></span><br><span class="line"><span class="emphasis">        进行中               :active,  des2, 2014-01-09, 3d</span></span><br><span class="line"><span class="emphasis">        计划一               :         des3, after des2, 5d</span></span><br><span class="line"><span class="emphasis">        计划二               :         des4, after des3, 5d</span></span><br><span class="line"><span class="emphasis">​```</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- 关于 <span class="strong">**甘特图**</span> 语法，参考 [<span class="string">这儿</span>][<span class="symbol">2</span>],</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## UML 图表</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">可以使用UML图表进行渲染。 [<span class="string">Mermaid</span>](<span class="link">https://mermaidjs.github.io/</span>). 例如下面产生的一个序列图：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">​```mermaid</span></span><br><span class="line"><span class="emphasis">sequenceDiagram</span></span><br><span class="line"><span class="emphasis">张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?</span></span><br><span class="line"><span class="emphasis">李四--&gt;&gt;王五: 你最近怎么样，王五？</span></span><br><span class="line"><span class="emphasis">李四--x 张三: 我很好，谢谢!</span></span><br><span class="line"><span class="emphasis">李四-x 王五: 我很好，谢谢!</span></span><br><span class="line"><span class="emphasis">Note right of 王五: 李四想了很长时间, 文字太长了<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span>不适合放在一行.</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">李四--&gt;&gt;张三: 打量着王五...</span></span><br><span class="line"><span class="emphasis">张三-&gt;&gt;王五: 很好... 王五, 你怎么样?</span></span><br><span class="line"><span class="emphasis">​```</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">这将产生一个流程图。:</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">​```mermaid</span></span><br><span class="line"><span class="emphasis">graph LR</span></span><br><span class="line"><span class="emphasis">A[长方形] -- 链接 --&gt; B((圆))</span></span><br><span class="line"><span class="emphasis">A --&gt; C(圆角长方形)</span></span><br><span class="line"><span class="emphasis">B --&gt; D&#123;菱形&#125;</span></span><br><span class="line"><span class="emphasis">C --&gt; D</span></span><br><span class="line"><span class="emphasis">​```</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- 关于 <span class="strong">**Mermaid**</span> 语法，参考 [<span class="string">这儿</span>][<span class="symbol">3</span>],</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## FLowchart流程图</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">我们依旧会支持flowchart的流程图：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">​```mermaid</span></span><br><span class="line"><span class="emphasis">flowchat</span></span><br><span class="line"><span class="emphasis">st=&gt;start: 开始</span></span><br><span class="line"><span class="emphasis">e=&gt;end: 结束</span></span><br><span class="line"><span class="emphasis">op=&gt;operation: 我的操作</span></span><br><span class="line"><span class="emphasis">cond=&gt;condition: 确认？</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">st-&gt;op-&gt;cond</span></span><br><span class="line"><span class="emphasis">cond(yes)-&gt;e</span></span><br><span class="line"><span class="emphasis">cond(no)-&gt;op</span></span><br><span class="line"><span class="emphasis">​```</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- 关于 <span class="strong">**Flowchart流程图**</span> 语法，参考 [<span class="string">这儿</span>][<span class="symbol">4</span>].</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## 导出与导入</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">###  导出</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <span class="strong">**文章导出**</span> ，生成一个.md文件或者.html文件进行本地保存。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">### 导入</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，</span></span><br><span class="line"><span class="emphasis">继续你的创作。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">[1]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference</span></span><br><span class="line"><span class="emphasis">[2]: https://mermaidjs.github.io/</span></span><br><span class="line"><span class="emphasis">[3]: https://mermaidjs.github.io/</span></span><br><span class="line"><span class="emphasis">[4]: http://adrai.github.io/flowchart.js/</span></span><br></pre></td></tr></table></figure>
<h2 id="二、使用-Typora"><a href="#二、使用-Typora" class="headerlink" title="二、使用 Typora"></a>二、使用 Typora</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Typora 是一款支持实时预览的 Markdown 文本编辑器，现在支持有 OS X、Windows、Linux 三个平台的版本。其实像 Pycharm 等 IDE 也支持 md 语法，不过大都是左侧显示源码，右侧显示效果，或者只显示源码/效果，包括 CSDN 的在线 Markdown 编辑器也是这样。而Typora 创新的提出实时预览这种方式，源码和显示效果合一显示，所见即所得，非常的方便。</p>
<p>为什么要用 Typora ？就和你为什么用 jetbrains 全家桶写代码一样，因为它们漂亮、简洁、强大。</p>
<p>这些特点在它的官网(<a href="https://typora.io/">Typora</a>)就能看出来。直接拉到页面最后，下载对应版本安装就可以了。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210109193749369.png" alt="image-20210109193749369"></p>
<p>网上有很多介绍的 Typora 的文章，推荐两篇写的很详细的文章。</p>
<p>深度介绍(必看)：<a href="https://sspai.com/post/54912">少数派:Typora 完全使用详解</a></p>
<p>快捷键介绍：<a href="https://www.cnblogs.com/hider/p/11614688.html">Typora入门</a></p>
<p>设置：**</p>
<h3 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h3><p>下面介绍几个我觉得很有用很方便的设置。</p>
<p>打开<code>文件</code> –&gt; <code>偏好设置</code>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210109230837590.png" alt="image-20210109230837590"></p>
<h4 id="1-打开自动保存"><a href="#1-打开自动保存" class="headerlink" title="1. 打开自动保存"></a>1. 打开自动保存</h4><p>选择<code>通用</code>，勾选 <code>自动保存</code>。这样软件会定期自动保存我们的编辑内容，防止异常退出时忘记保存。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210109231108977.png" alt="image-20210109231108977"></p>
<h4 id="2-打开成对符号"><a href="#2-打开成对符号" class="headerlink" title="2. 打开成对符号"></a>2. 打开成对符号</h4><p>选择<code>编辑器</code>，勾选 <code>匹配括号和引号</code>和<code>匹配 Markdown 字符</code>。这样当我们输入括号(<code>[]()&#123;&#125;</code>)等成对的符号时，只需要输入左边一半，软件会自动补充右边一半。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210109231716512.png" alt="image-20210109231716512"></p>
<h4 id="3-打开首行缩进"><a href="#3-打开首行缩进" class="headerlink" title="3. 打开首行缩进"></a>3. 打开首行缩进</h4><p>选择<code>Markdown</code>，勾选 <code>首行缩进</code>。这个看自己需要，只是在 Typora 本地显示中首行缩进，因为 Markdown 语法本身并没有支持首行缩进的符号，所以文件拿到别的地方不会有首行缩进的效果。如果非要首行缩进，可以在段落开头加个<code>&amp;emsp;&amp;emsp;</code>可以在其他地方打开时也能首行缩进。这个仁者见仁，智者见智，开始我是很喜欢首行缩进的，后来发现不缩进也挺好看的，现在已经习惯了。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210109232158103.png" alt="image-20210109232158103"></p>
<h4 id="4-打开自动保存图片"><a href="#4-打开自动保存图片" class="headerlink" title="4. 打开自动保存图片"></a>4. 打开自动保存图片</h4><p>选择<code>图像</code>，选择<code>插入图片时...</code>自动执行的动作：</p>
<ul>
<li>默认是<code>无特殊操作</code>，当你写文章时，粘贴或者拖动进来的图片会自动保存在<code>C:\Users\&lt;电脑用户名&gt;\AppData\Roaming\Typora\typora-user-images</code>目录下。</li>
<li><code>复制图片到当前文件夹</code>，选择该选项时，粘贴或者拖动进来的图片会自动保存在当前编辑的文件同目录下。</li>
<li><code>复制图片到 ./$&#123;filename&#125;.assets 文件夹</code>，选择该选项时，粘贴或者拖动图片进来，会自动在当前编辑的文件目录下新建文件夹<code>$&#123;filename&#125;.assets</code>并将图片复制到该文件夹下，其中``${filename}<code>是当前编辑的文件名，不包含</code>.md`。</li>
<li><code>上传图片</code>，选择该选项时，粘贴或者拖动图片进来，会根据下面的<code>上传服务设置</code>将图片自动上传到图床，平时最好用这个设置，详细内容在下一篇文章中介绍。</li>
<li><code>复制到指定路经</code>，选择该选项时，可以自己填入一个文件夹，粘贴或者拖动图片进来，会自动创建文件夹并将图片复制进去。</li>
</ul>
<p>建议选择<code>上传图片</code>，按照下篇文章的方法将图片保存在图床。当然，如果写的的文章只保存在本地或者需要断网时浏览，那么可以选择其他几个选项。我有一次手贱把图片文件夹删了，辛苦几天截得图片和录的 GIF 全没了，经过这次教训，我感觉还是上传到图床比较保险，可惜不能同时选择保存到本地和上传图床。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210109233120920.png" alt="image-20210109233120920"></p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>现在我们可以先在本地写好博客，然后按照前两篇文章的方法将它们发布到网站上了。不过还不够完美，我们一直没说带图片的文章要怎么处理，其实 Hexo 本身支持将图片打包发布，需要新建博客时创建对应的图片文件夹，有点麻烦就不介绍了。我们既然已经用了 Markdown 格式，图片在 Markdown 文件里不过就是一个路径或者网址，为什么不用更简便的方法呢？接下来第五篇文章，就介绍怎么搭建自己的免费图床并搭配 Typora 使用。</p>
<p>相信我，用上了 Markdown和 Typora ，你会爱上写博客的。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始免费搭建自己的博客(五)——Typora + PicGo + GitHub/Gitee图床</title>
    <url>/2021/01/14/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E4%BA%94)%E2%80%94%E2%80%94Typora%20+%20PicGo%20+%20GitHub%20Gitee%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<blockquote>
<p>   ​    本文是博客搭建系列文章第四篇，其他文章链接：</p>
<ol>
<li>从零开始免费搭建自己的博客(一)——<a href="https://yushuaige.github.io/2020/12/31/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%80-%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/">本地搭建 Hexo 框架</a></li>
<li>从零开始免费搭建自己的博客(二)——<a href="https://yushuaige.github.io/2021/01/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%BA%8C-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-GitHub-pages-%E5%BB%BA%E7%AB%99/">基于 GitHub pages 建站</a></li>
<li>从零开始免费搭建自己的博客(三)——<a href="https://yushuaige.github.io/2021/01/02/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%89-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-Gitee-pages-%E5%BB%BA%E7%AB%99/">基于 Gitee pages 建站</a></li>
<li>从零开始免费搭建自己的博客(四)——<a href="https://yushuaigee.gitee.io/2021/01/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E5%9B%9B)%E2%80%94%E2%80%94%E7%BC%96%E5%86%99Markdown%E6%96%87%E7%AB%A0%E5%88%A9%E5%99%A8%20Typora/">编写Markdown文章利器 Typora</a></li>
<li><strong>从零开始免费搭建自己的博客(五)——<a href="https://yushuaigee.gitee.io/2021/01/14/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E4%BA%94)%E2%80%94%E2%80%94Typora%20+%20PicGo%20+%20GitHub%20Gitee%E5%9B%BE%E5%BA%8A/">Typora + PicGo + GitHub/Gitee图床</a>**</strong></li>
<li>从零开始免费搭建自己的博客(六)——三个站点一键发布博客</li>
<li>从零开始免费搭建自己的博客(七)——迁移 CSDN 博客到个人博客站点</li>
<li>从零开始免费搭建自己的博客(八)——博客网站个性化设置及优化</li>
</ol>
</blockquote>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面我们搭建好了博客，选择了 Typora 作为创作软件，但是现在一篇博客从写完到发布到网站还是有许多步骤要手动处理，比如处理图片路径，发布更新等。写博客已经很耗费时间了，我们肯定不希望花费大量时间在部署上，毕竟使用 CSDN 等平台写博客时只需一键就可以发布博客，所以有必要把一些重复工作自动化，提升自己的创作体验。接下来两篇文章就做这件事情，首先是完成图床的搭建，然后是通过脚本一键发布博客。</p>
<p>本篇文章先介绍怎么搭建自己的免费图床。我尝试了各种组合方案，最终选用了最方便的 Typora + PicGo + GitHub + jsDelivr CDN加速的方案。不过既然前面讲了使用 Gitee Pages 建站，这里也介绍一下使用 Gitee 搭建图床的方法。关于 Typora 的使用介绍见上一篇文章。</p>
<h2 id="什么是图床"><a href="#什么是图床" class="headerlink" title="什么是图床"></a>什么是图床</h2><p>图床是什么？Picture bed？No ，其实是 Picture host，即提供外链访问的图片存储服务器（看了《西部世界》，见到 “host” 最先想到的竟是“接待员” -.-）。通俗讲就是你把图片上传到一个图床提供者的图片服务器上，它会生成一个存储链接，你就可以随时通过这个链接就下载这个图片，而且还可以把这个链接放到 html 里或者 Markdown 文件里，浏览时再由浏览器或者阅读器自动加载出来。</p>
<p>具体有什么用呢？对于我们的 Markdown 格式的博客而言，图片就成了一个文本，你可以把文章复制到 CSDN/简书/知乎/个人博客等地方，每次换地方不需要重新上传图片，这些网站都能根据图床链接将图片加载出来。这样一说是不是发现“图床”这个翻译还挺贴切的。</p>
<p>当然也有翻车的时候，有时候我们浏览网页时，发现文字都能加载出来，图片都变成了一个个的叉号，这就是因为图床挂了，网站无法根据链接加载到图片，所以图床的稳定性就很重要了。还有一个问题，就是外链大家都可以访问，那么你的图片就很容易被盗链，别人直接用你的链接就可以下载到你的高清大图，版权问题不说，如果你是使用付费图床，一般是按访问流量收费，别人在文章中直接用你的图片链接，走的都是你的流量费，不过现在的图床都提供了防盗链方案。</p>
<p>图床服务国内的有微博图床、聚合图床、七牛云、阿里云、腾讯云等，国外的有 imgur、imgbox、SM图床等，大都是要收费的。此外也有些免费的图床服务，但是不敢用啊，万一哪天没了。</p>
<p>其实我们可以利用 GitHub 的存储能力和对外开放访问的特点，将 GitHub 仓库作为图床。不但免费，而且不用担心图床挂掉，毕竟如果 GitHub 挂了，部署在 GitHub Pages 的博客网站也打不开了，还管什么图片能不能加载出来。当然也请大家合理利用资源，GitHub仓库有 1G 大小的上限。</p>
<h2 id="什么是-PicGo"><a href="#什么是-PicGo" class="headerlink" title="什么是 PicGo"></a>什么是 PicGo</h2><p>PicGo 是一位中国开发者基于 electron-vue 开发的用于快速上传图片并获取图片 URL 链接的开源工具，GitHub主页：<a href="https://github.com/Molunerfinn/PicGo">PicGo</a>，作者博客：<a href="https://molunerfinn.com/">MARKSZのBlog</a>。</p>
<p>写文章需要引用图片时，我们要打开浏览器将图片上传到图床服务器，再把链接复制粘贴到文章中。这太影响效率了，能不能每次插入图片时自动把图片上传并返回链接地址呢？PicGo 便是做这件事的软件，只要配置好图床类型，就可以直接拖拽图片进行上传并自动返回图片链接，配合 Typora 还可以实现在文章中插入图片时自动上传并替换为链接内容，完全不用感知上传图片的过程。</p>
<p>PicGo 本体支持七牛云、腾讯云、又拍云、阿里云、SM、Imgur、GitHub这些图床，而且还支持自己扩展第三方图床的支持插件，比如就有人开发了 Gitee 的插件。更多介绍见<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%90%AC%E8%AF%B4%E4%BD%A0%E4%B9%9F%E6%83%B3%E7%94%A8picgo">官方文档</a>，下载地址：<a href="https://molunerfinn.com/PicGo/">PicGo</a></p>
<p>打开下载地址，选择一个版本点进去，点击下载对应的安装包安装即可。同样的，如果下载速度太慢，右键<code>复制链接地址</code>，粘贴到迅雷下载。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113000207889.png" alt="image-20210113000207889"></p>
<h2 id="GitHub-图床"><a href="#GitHub-图床" class="headerlink" title="GitHub 图床"></a>GitHub 图床</h2><h4 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1. 新建仓库"></a>1. 新建仓库</h4><p>第一步要先在 GitHub 新建一个仓库用于存储图片。</p>
<p>打开自己 GitHub <a href="https://github.com/">主页</a>，点击<kbd>New</kbd>新建仓库。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113000300203.png" alt="image-20210113000300203"></p>
<p><code>Repository name</code>填写仓库名字，<code>Description</code>填写仓库描述，勾选<code>Add a README file</code>，点击<kbd>Create repository</kbd>创建仓库。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113000500752.png" alt="image-20210113000500752"></p>
<h4 id="2-获取-repo-tokens"><a href="#2-获取-repo-tokens" class="headerlink" title="2. 获取 repo tokens"></a>2. 获取 repo tokens</h4><p>这个 token 主要用于让 PicGo 有权限往我们的仓库 push 代码(图片)。</p>
<p>点击自己的头像，选择<kbd>Settings</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113000533777.png" alt="image-20210113000533777"></p>
<p>选择<kbd>Developer settings</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113000731905.png" alt="image-20210113000731905"></p>
<p>点击 <kbd>Personal access tokens</kbd>。然后点击<kbd>Generate new token</kbd>，因为是敏感操作，此时需要确认密码。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113000830696.png" alt="image-20210113000830696"></p>
<p><code>Note</code>填写 token 用途，用于备忘。下面只需要勾选<code> repo</code>，只给更新仓库的权限。最后点击最下面的<kbd>Generate token</kbd>创建成功。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113001007861.png" alt="image-20210113001007861"></p>
<p>复制字符串下一步使用。注意，为了安全起见此字符串只会出现一次，点击其他页面后就无法再查看了，需要重新创建，所以最好先保存到本地编辑器中。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113001256619.png" alt="image-20210113001256619"></p>
<h4 id="3-PicGo-配置"><a href="#3-PicGo-配置" class="headerlink" title="3. PicGo 配置"></a>3. PicGo 配置</h4><p>打开 PicGo ,选择<code>图床设置</code>，选择<code>GitHub图床</code>，填写参数：</p>
<ul>
<li><code>设定仓库名</code>，填写格式为<code>用户名/仓库名</code></li>
<li><code>设定分支名</code>，填写默认分支<code>master</code>或者<code>main</code></li>
<li><code>设定Token</code>，填写上一步获取的 token 值</li>
<li><code>指定存储路径</code>，选填，可以自定义名称，比如用年月来分类，不填图片会上传在仓库根目录。</li>
<li><code>设定自定义域名</code>，用于修改返回的 url 前缀，不填则返回原始 url。后面配置CDN加速需要更改此项。</li>
</ul>
<p>选择<kbd>设为默认图床</kbd>，点击<kbd>确定</kbd>保存配置。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210112233928390.png" alt="image-20210112233928390"></p>
<p>配置完成后，点击<code>上传区</code>，随便选择电脑上一张图片拖动到上传区，上传成功后会弹窗提示，将该 url 复制到浏览器打开就可以看到图片。可以在<code>PicGo设置</code>，打开<code>上传后自动复制URL</code>，这样上传成功后图片 url 会自动复制在剪贴板，可以直接粘贴到记事本。</p>
<p><img src="https://raw.githubusercontent.com/yushuaige/myblog/master/img/image-20210113223506304.png" alt="image-20210113223506304"></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210112235620646.png" alt="image-20210112235620646"></p>
<h4 id="4-CDN-加速-jsDelivr"><a href="#4-CDN-加速-jsDelivr" class="headerlink" title="4. CDN 加速(jsDelivr)"></a>4. CDN 加速(jsDelivr)</h4><p>从上一步可以看到 GitHub 存储的图片地址是 <code>https://raw.githubusercontent.com</code> 开头的网址，这个域名在某些地方可能打不开或者很慢导致图片加载失败，所以我们需要对图片配置 CDN 加速。</p>
<p>CDN的全称是(Content Delivery Network)，即内容分发网络。其目的是通过在现有的Internet中增加一层新的CACHE(缓存)层，将网站的内容发布到最接近用户的网络”边缘“的节点，使用户可以就近取得所需的内容，提高用户访问网站的响应速度。具体原理见<a href="https://www.jianshu.com/p/1dae6e1680ff">CDN加速原理</a>。通俗来讲，就是 CDN 服务商在全球各个地方建立服务器把要加速的站点进行缓存备份，当你访问站点时实际上是从离你最近的服务器访问缓存，速度自然就快了。</p>
<p>既然要搭建这么多服务器，服务肯定是要收费的吧。在这个互联网时代，还真有免费 CDN —— jsDelivr CDN，不仅开源免费而且在中国大陆建有许多服务站点，官网还声称是中国大陆唯一拥有许可证的公有 CDN，所以速度、稳定性都可以放心了。</p>
<p>打开<a href="https://www.jsdelivr.com/">jsDelivr CDN 官网</a>，可以看到 jsDelivr 支持 npm、GitHub、WordPress三个站点的加速，用于我们的GitHub图床是再适合不过了。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210112225345331.png" alt="image-20210112225345331"></p>
<p>在浏览器输入<code>https://cdn.jsdelivr.net/gh/用户名/仓库名/</code>，(注意最后的<code>/</code>不要丢)，可以打开我们在 GitHub 上创建的仓库的文件列表，说明我们在 Github 上创建的仓库已经默认被 jsDelivr 缓存了。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210112232127381.png" alt="image-20210112232127381"></p>
<p>所以只要把资源链接中的前面部分更改一下就可以使用 CDN 加速了。</p>
<p>例如，</p>
<p>原始图片地址的格式为<code>https://raw.githubusercontent.com/用户名/仓库名/分支名/目录/图片名.png</code>，<code>https://raw.githubusercontent.com/yushuaige/myblog/master/img/image-20201219114500183.png</code>，</p>
<p>更改后的图片地址的格式<code>https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名/目录/图片名.png</code>，</p>
<p><code>https://cdn.jsdelivr.net/gh/yushuaige/myblog@master/img/image-20201219114500183.png</code>。</p>
<p>可以分别打开一下两个图片网址感受一下速度区别。</p>
<p><strong>PicGo 中需要改一下自定义域名</strong>，之后上传图片自动生成的链接就是 jsDelivr 的链接了。具体就是在<code>设定自定义域名</code>填写<code>https://cdn.jsdelivr.net/gh/用户名/仓库名@master</code>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210112232746338.png" alt="image-20210112232746338"></p>
<h4 id="5-Typora-配置"><a href="#5-Typora-配置" class="headerlink" title="5. Typora 配置"></a>5. Typora 配置</h4><p>打开<code>文件</code>，<code>偏好设置</code>，<code>图像</code>，选择插入图片时<code>上传图片</code>，勾选图中三个选项，上传服务设定选择<code>PicGo (app)</code>，PicGo 路径通过后面的文件夹选择自己电脑上 PicGo 的安装路径。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210112233235226.png" alt="image-20210112233235226"></p>
<p>此时，使用 Typora 编辑文件，拖入或者粘贴图片时，会自动调用 PicGo 将图片上传到我们的 GitHub 图床，并把返回的图片链接粘贴到文章中，快去试试吧。</p>
<h2 id="Gitee-图床"><a href="#Gitee-图床" class="headerlink" title="Gitee 图床"></a>Gitee 图床</h2><h4 id="1-新建仓库-1"><a href="#1-新建仓库-1" class="headerlink" title="1. 新建仓库"></a>1. 新建仓库</h4><p>第一步要先在 Gitee 新建一个仓库用于存储图片。</p>
<p>打开自己 Gitee <a href="https://gitee.com/">主页</a>，点击右上角的<kbd>+</kbd>号新建仓库。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113220514529.png" alt="image-20210113220514529"></p>
<p>依次填写<code>仓库名称</code>，<code>路径</code>，<code>仓库介绍</code>，注意要勾选<code>公开</code>和<code>使用Readme文件初始化这个仓库</code>，最后点击<kbd>创建</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113221426230.png" alt="image-20210113221426230"></p>
<h4 id="2-获取私人令牌"><a href="#2-获取私人令牌" class="headerlink" title="2. 获取私人令牌"></a>2. 获取私人令牌</h4><p>同样的，<code>私人令牌</code>和 GitHub 上的 token 一样，主要用于让 PicGo 有权限往我们的仓库 push 代码(图片)。</p>
<p>点击自己的头像，选择<code>设置</code>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113222056606.png" alt="image-20210113222056606"></p>
<p>点击<code>私人令牌</code>，选择<kbd>生成新令牌</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113222420963.png" alt="image-20210113222420963"></p>
<p>同样的，我们只勾选更新代码的权限。填写<code>私人令牌描述</code>，点击<kbd>提交</kbd>。因为是敏感操作，此时需要确认密码。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113222755852.png" alt="image-20210113222755852"></p>
<p>复制字符串下一步使用。注意，为了安全起见此字符串只会出现一次，点击其他页面后就无法再查看了，需要重新创建，所以最好先保存到本地编辑器中。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113223101983.png" alt="image-20210113223101983"></p>
<h4 id="3-PicGo-配置-1"><a href="#3-PicGo-配置-1" class="headerlink" title="3. PicGo 配置"></a>3. PicGo 配置</h4><p>PicGo 本体没有支持 Gitee ，所以需要下载一个插件，有人己经写好了。</p>
<p>打开 PicGo ，点击 <code>插件设置</code>，搜索框输入<code>gitee</code>，目前有两个插件应该都能用，任选一个安装，这里我选择的后面那个。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113225243341.png" alt="image-20210113225243341"></p>
<p>安装好插件后，这时再选择<code>图床设置</code>，选择<code>gitee</code>，填写参数：</p>
<ul>
<li><code>repo</code>，填写格式为<code>用户名/仓库名</code></li>
<li><code>branch</code>，填写默认分支<code>master</code></li>
<li><code>token</code>，填写上一步获取的私人令牌的值</li>
<li><code>path</code>，选填，可以自定义名称，不填图片会上传在仓库根目录。</li>
<li><code>customPath</code>，这个会在上一个参数的基础上再创建一层子文件夹用于按年、年月或年季来分类保存。</li>
<li><code>customUrl</code>，用于修改返回的 url 前缀，不填则返回原始 url。后面解决<code>文件大于1M，登录后可见</code>的问题需要更改此项。</li>
</ul>
<p>在 PicGo 里，GitHub 的设置都是中文的， Gitee 插件的设置反而都是英文的，有点意思hh。</p>
<p>选择<kbd>设为默认图床</kbd>，点击<kbd>确定</kbd>保存配置。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113224703801.png" alt="image-20210113224703801"></p>
<p>配置完成后，点击<code>上传区</code>，随便选择电脑上一张图片拖动到上传区，上传成功后会弹窗提示，将该 url 复制到浏览器打开就可以看到图片。可以在<code>PicGo设置</code>，打开<code>上传后自动复制URL</code>，这样上传成功后图片 url 会自动复制在剪贴板，可以直接粘贴到记事本。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210112235111559.png" alt="image-20210112235111559"></p>
<p><img src="https://gitee.com/yushuaigee/myblog/raw/master/img/image-20210113224024050.png" alt="image-20210113224024050"></p>
<h4 id="4-Typora-配置"><a href="#4-Typora-配置" class="headerlink" title="4. Typora 配置"></a>4. Typora 配置</h4><p>打开<code>文件</code>，<code>偏好设置</code>，<code>图像</code>，选择插入图片时<code>上传图片</code>，勾选图中三个选项，上传服务设定选择<code>PicGo (app)</code>，PicGo 路径通过后面的文件夹选择自己电脑上 PicGo 的安装路径。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210112233235226.png" alt="image-20210112233235226"></p>
<p>此时，使用 Typora 编辑文件，拖入或者粘贴图片时，会自动调用 PicGo 将图片上传到我们的 Gitee 图床，并把返回的图片链接粘贴到文章中，快去试试吧。</p>
<h4 id="5-解决”文件大于1M，登录后可见”问题"><a href="#5-解决”文件大于1M，登录后可见”问题" class="headerlink" title="5. 解决”文件大于1M，登录后可见”问题"></a>5. 解决”文件大于1M，登录后可见”问题</h4><p>从上一步可以看到 Gitee 存储的图片地址是 <code>https://gitee.com/yushuaigee/myblog/raw</code> 开头的网址，这个域名是国内站点，速度很快，无需配置CDN加速，图床配置好之后，图片上传成功，在浏览器也能打开，看似没毛病，其实暗藏玄机。</p>
<p>如果你上传的图片大于 1M ，不管是在下一步的 Typora 中还是在浏览器网页中，是无法加载出图片的，比如这张图片<code>https://gitee.com/yushuaigee/myblog/raw/master/img/myblog.gif</code>，输入到浏览器会显示<code>文件大于1M，登录后可见</code>。如果能打开是因为你前面已经登录了 Gitee 了，浏览器新建一个无痕窗口就打不开了。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113230821769.png" alt="image-20210113230821769"></p>
<p>可是别人在浏览我们博客时不可能要先登录个 Gitee 吧，所以要想办法解决一下。前面我们将博客仓库打开 Gitee Pages 功能，其他人可以访问我们博客仓库里的博客了，图床仓库也一样，打开它的  Gitee Pages 功能，无需登陆就可以访问里面的图片了。</p>
<p>进入图床仓库主页，点击<code>服务</code>，<code>Gitee Pages</code>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113231334002.png" alt="image-20210113231334002"></p>
<p>点击<code>启动</code>部署。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113232431704.png" alt="image-20210113232431704"></p>
<p>这样我们就可以通过Gitee Pages 地址来访问图床仓库里的图片了 ，地址前缀需要改一下。</p>
<p>例如，</p>
<p>原始图片地址的格式为<code>https://gitee.com/用户名/仓库名/raw/分支名/目录/图片名.png</code>，<code>https://gitee.com/yushuaigee/myblog/raw/master/img/myblog.gif</code>，</p>
<p>更改后的图片地址的格式<code>https://用户名.gitee.io/仓库名/目录/图片名.png</code>，</p>
<p><code>https://yushuaigee.gitee.io/myblog/img/myblog.gif</code>。</p>
<p><strong>对应的，PicGo 中就需要改一下自定义域名</strong>，之后上传图片自动生成的链接就是 Gitee Pages 上的地址了。具体就是在<code>customUrl</code>填写<code>https://用户名.gitee.io/仓库名</code>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113233142363.png" alt="image-20210113233142363"></p>
<p><strong>这种方法也存在一个问题</strong>，就是因为 Gitee Pages 不支持自动更新 (pro版支持，需要收费)，每次上传完图片后，需要打开浏览器手动点一下更新。你可以写完文章，把图片一把上传，再点一次更新，但是终究还是有点麻烦。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113231428575.png" alt="image-20210113231428575"></p>
<p><strong>为了解决这个问题，我写了一个自动化脚本</strong>，双击启动就可以自动完成 Gitee Pages 部署，其实原理就是利用 pyppeteer 模拟用户登录，到部署页面模拟点击<code>更新</code>按钮，虽然还是需要启动一下脚本，但是也稍微省了点事儿，下一篇文章将自动部署 Hexo 和 自动部署 Gitee Pages  结合起来。</p>
<p><strong>效果</strong></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113233250172.png" alt="image-20210113233250172"></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210113233443910.png" alt="image-20210113233443910"></p>
<p><strong>start.bat 源码</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:: start.bat 源码</span><br><span class="line">:: python路径 + 空格 + 脚本路径</span><br><span class="line">C:\Python\Scripts\python.exe D:/scripts/post_my_blog.py</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<p><strong>post_my_blog.py 源码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># post_my_blog.py 源码</span></span><br><span class="line"><span class="comment"># 注意: 更改18、19、45行的用户名密码为自己的Gitee的用户名密码，第45行的仓库名为图床仓库的名字</span></span><br><span class="line"><span class="comment"># 每处延时都有用，是我花了好长时间调试过的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">_update_gitee_pages</span>(<span class="params">usr_name, repo_name</span>):</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(devtools=<span class="literal">False</span>, dumpio=<span class="literal">True</span>, userDataDir=os.path.abspath(<span class="string">&#x27;./cookies&#x27;</span>))</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="comment"># 登录</span></span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://gitee.com/login&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">2000</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;登录&#x27;</span> <span class="keyword">in</span> <span class="keyword">await</span> page.title():</span><br><span class="line">        <span class="keyword">await</span> page.<span class="built_in">type</span>(<span class="string">&#x27;#user_login&#x27;</span>, <span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> page.<span class="built_in">type</span>(<span class="string">&#x27;#user_password&#x27;</span>, <span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> page.keyboard.press(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;使用账号密码登录成功...&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> page.waitFor(<span class="number">2000</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;使用cookies缓存登录成功...&#x27;</span>)</span><br><span class="line">    <span class="comment"># 更新</span></span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://gitee.com/%s/%s/pages&#x27;</span> % (usr_name, repo_name))</span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">2000</span>)</span><br><span class="line">    page.on(<span class="string">&#x27;dialog&#x27;</span>, <span class="keyword">lambda</span> dialog: asyncio.ensure_future(_handle_dialog(page, dialog)))</span><br><span class="line">    <span class="keyword">await</span> page.click(<span class="string">&#x27;#pages-branch &gt; div.button.orange.redeploy-button.ui.update_deploy&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">20000</span>)</span><br><span class="line">    print(<span class="string">&#x27;更新 Gitee Pages %s 成功...&#x27;</span> % repo_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">_handle_dialog</span>(<span class="params">page, dialog</span>):</span></span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">2000</span>)</span><br><span class="line">    print(<span class="string">&#x27;点击确定更新&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> dialog.accept()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_gitee_pages</span>(<span class="params">usr_name, repo_name</span>):</span></span><br><span class="line">    asyncio.get_event_loop().run_until_complete(_update_gitee_pages(usr_name, repo_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    update_gitee_pages(<span class="string">&#x27;用户名&#x27;</span>, <span class="string">&#x27;仓库名&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>两个图床都不完美，所以究竟选哪个呢？让我这个强迫症很纠结。我尝试了各种组合方案，最终总结了两个方案：</p>
<ol>
<li> Typora + PicGo + GitHub图床 + jsDelivr CDN加速</li>
<li> Typora + PicGo + Gitee图床 + Gitee Pages + 自动部署脚本</li>
</ol>
<p>第一种方案似乎比较完美，但是美中不足的是虽然CDN加速解决了查看图片的速度，但是上传还是有点慢的，会出现在 Typora 中粘贴了一张图片后需要5秒以上才能上传成功并加载出来，还有就是本地没有分类备份(其实在<code>C:\Users\用户名\AppData\Roaming\Typora\typora-user-images</code>目录下有缓存)。</p>
<p>第二种方案速度没的说，通过 Gitee Pages  也解决了大图片的问题，通过脚本也解决了自动部署的问题，但是在 Typora 中粘贴了一张图片后，由于没有<code>更新</code>部署，实际上还不能访问，所以不能实时预览，需要用脚本自动部署后重新打开 Typora 才能加载出图片。我想了一种办法，就是在 Typora 设置插入图片时保存在本地，这样就实时加载，还能在本地存一份备份，然后写脚本将文件夹里图片用 PicGo 批量上传然后再调脚本自动部署，然后再自动将 md 文件中的本地链接都改成图床链接。看似麻烦还是可行的，下一篇文章中再实现吧。</p>
<p>我暂时选择了第一种方案。.</p>
<p>本篇文章介绍怎么搭建自己的 GitHub 和 Gitee 免费图床并搭配 Typora 和 PicGo 工具使用 ，两种图床都有自己的好处和缺点，我也尝试了提供了解决办法。</p>
<p>自己搭建的博客漂亮切方便，但终究不如在 CSDN 等成熟的平台上发布博客曝光量大。所以我们写完博客想在 CSDN 和自己的博客站点同时发布，我们怎么可能一篇一篇地手动复制呢，当然是自动化脚本实现啦。接下来两篇文章介绍一下怎么一键在三个站点发布博客，以及怎么快速把 CSDN 的旧博客迁移到自己的站点。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
