<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>从零开始免费搭建自己的博客(三)——基于 Gitee pages 建站</title>
    <url>/2021/01/02/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%89-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-Gitee-pages-%E5%BB%BA%E7%AB%99/</url>
    <content><![CDATA[<blockquote>
<p>​    本文是博客搭建系列文章第三篇，其他文章链接：</p>
<ol>
<li>从零开始免费搭建自己的博客(一)——<a href="https://yushuaige.github.io/2020/12/31/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%80-%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/">本地搭建 Hexo 框架</a></li>
<li>从零开始免费搭建自己的博客(二)——<a href="https://yushuaige.github.io/2021/01/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%BA%8C-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-GitHub-pages-%E5%BB%BA%E7%AB%99/">基于 GitHub pages 建站</a></li>
<li><strong>从零开始免费搭建自己的博客(三)——<a href="https://yushuaige.github.io/2021/01/02/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%89-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-Gitee-pages-%E5%BB%BA%E7%AB%99/">基于 Gitee pages 建站</a></strong></li>
<li>从零开始免费搭建自己的博客(四)——编写Markdown文章利器 Typora</li>
<li>从零开始免费搭建自己的博客(五)——Typora + PicGo + GitHub/Gitee图床</li>
<li>从零开始免费搭建自己的博客(六)——三个站点一键发布博客</li>
<li>从零开始免费搭建自己的博客(七)——迁移 CSDN 博客到个人博客站点</li>
<li>从零开始免费搭建自己的博客(八)——博客网站个性化设置及优化</li>
</ol>
</blockquote>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在第一篇文章里，我们利用 Hexo 框架在本地搭建了一个精美的博客，第二篇文章里，我们利用 GitHub 提供的免费静态网页托管服务建立了个人博客网站，将博客发布到了互联网上。</p>
<p>可是我们写博客的原因，一个是方便自己在不同的地方能直接打开网页就可以回顾知识，一个是为了方便他人查阅参考。由于国内网络环境的原因，某些地方某些时间，访问 GitHub 会比较慢，这就会导致博客无法被别人访问或者自己换个地方上网时也打不开自己的博客。</p>
<p>好消息是现在国内有和 GitHub 功能类似的 Gitee，中文名码云。之前也有注意到这个平台，当时以为他仅仅是山寨 GitHub 而已，肯定火不起来。没想到随着 GitHub 网络环境越来越差，下载个工程才几kb的速度，经常等了很久之后下载失败。有一次尝试了下将 GitHub 项目同步到 Gitee 再下载，速度直接起飞，真香。随着许多有影响力的项目加入了 Gitee ，一些大佬的博客也开始推荐使用码云了，使用的人也越来越多了。</p>
<p>当然了，使用 Gitee Pages 相对于 GitHub Pages 网速是上来了，也有很多缺点。我在实际使用过程中遇到了许多DAN疼的地方，比如每次提交需要手动更新部署，以及大于1M图片登陆后可见等，我会在下面文章中用<strong>加粗</strong>字体指出。没办法，鱼和熊掌不可兼得( ╯▽╰)。准备在第八篇讲优化的文章中尝试一种完美解决方案(GitHub + CDN加速)。</p>
<p>本篇文章介绍怎样利用 Gitee  提供的免费静态网页托管服务 Gitee Pages 建站。</p>
<h2 id="一、-Gitee-Pages-简介"><a href="#一、-Gitee-Pages-简介" class="headerlink" title="一、 Gitee Pages 简介"></a>一、 Gitee Pages 简介</h2><p>上篇说了，GitHub 设计 Pages 功能是为了让用户能设计一个图文并茂的网页作为项目首页，提升新手友好度。那么Gitee为什么要提供网页托管服务呢？应该是同样的原因，或者说是因为 GitHub 有这个功能？( ╯▽╰)</p>
<p><a href="https://gitee.com/help/articles/4136">Gitee pages 官网</a> 的介绍：Gitee Pages 是一个免费的静态网页托管服务，您可以使用 Gitee Pages 托管博客、项目官网等静态网页。如果您使用过 Github Pages 那么您会很快上手使用 Gitee 的 Pages服务。目前 Gitee Pages 支持 Jekyll、Hugo、Hexo编译静态资源。</p>
<p>二、Gitee Pages 准备</p>
<p>在发布之前，要先准备好自己的 Gitee Pages 。</p>
<p>Gitee Pages 仓库的创建方法和 GitHub 略有不同，官网的帮助文档提供了两种创建方法，第一种是直接在 Gitee 上创建仓库，第二种是直接把 GitHub 创建好的仓库同步过来。比如已经按照上一篇的方法在 GitHub 建立了博客，想在 Gitee 再搭建一次作为一个备份，可以直接用第二种方法同步过来。</p>
<h3 id="1-注册-Gitee-账号"><a href="#1-注册-Gitee-账号" class="headerlink" title="1. 注册 Gitee 账号"></a>1. 注册 Gitee 账号</h3><p>首先需要注册一个 Gitee 账号，如果已经有账号直接看下一步。</p>
<p>打开 Gitee 官网：<a href="https://gitee.com/">gitee.com</a>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231193126082.png" alt="image-20201231193126082"></p>
<p>点击右上角<kbd>注册</kbd>按钮，填写用户名，手机，验证码。也可以根据下面的选项使用其他平台账号登录。注意，此处用户名是唯一ID，建议取个有意义的名字。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231193349306.png" alt="image-20201231193349306"></p>
<h3 id="2-创建-Gitee-Pages-仓库"><a href="#2-创建-Gitee-Pages-仓库" class="headerlink" title="2. 创建 Gitee Pages 仓库"></a>2. 创建 Gitee Pages 仓库</h3><p>登录账号后，点击页面右上角的<kbd>+</kbd>，选择<kbd>新建仓库</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231193543517.png" alt="image-20201231193543517"></p>
<p>仓库名称这里建议填写<code>你的用户名</code>，这样生成出来的网页地址是比较纯净的形式，如<code>https://&lt;你的用户名&gt;.github.io</code>。当然也可以自定义名称，比如<code>blog </code>，但是这样后面生成出来的网页地址会带一个子目录，像<code>https://&lt;你的用户名&gt;.github.io/blog</code>这样。</p>
<p>仓库介绍填写仓库描述，比如 <code>jacksparrow&#39;s blog</code>等，可不填。</p>
<p>注意勾选 <code>使用Readme文件初始化这个仓库</code>，会自动创建<code>master</code>分支并生成一个 <code>readme.md</code>文件。</p>
<p>最后点击下面的<kbd>创建</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231214142085.png" alt="image-20201231214142085"></p>
<p>点击页面右上角的<kbd>服务</kbd>，选择<kbd>Gitee Pages</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231215720997.png" alt="image-20201231215720997"></p>
<p>勾选<code>强制使用HTTPS</code>，点击<kbd>启动</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231220540958.png" alt="image-20201231220540958"></p>
<h3 id="3-测试-Gitee-Pages-页面"><a href="#3-测试-Gitee-Pages-页面" class="headerlink" title="3. 测试  Gitee Pages 页面"></a>3. 测试  Gitee Pages 页面</h3><p>创建 Gitee Pages 仓库后，为了测试能否访问 Pages 服务，我们给它添加一个静态网页。</p>
<p>先点击左边的<kbd>代码</kbd>回到文件页面，然后点击<kbd>文件</kbd> – <kbd>新建文件</kbd>在仓库下新建文件。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231220911962.png" alt="image-20201231220911962"></p>
<p>输入文件名<code>index.html</code>，在下面输入内容<code>&lt;h1&gt;这是我的博客!&lt;/h1&gt;</code>，这是 html 标记语言，表示一级标题。</p>
<p>其他保持默认，点击最下面的<kbd>提交</kbd>，提交文件到仓库。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231221057010.png" alt="image-20201231221057010"></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231195353883.png" alt="image-20201231195353883"></p>
<p><strong>与 GitHub 提交自动部署不同的是，Gitee上提交后需要手动部署。</strong>(网上有许多实现了 Gitee Pages 自动部署的脚本，其实就是用脚本模拟下面的操作，可以参考)</p>
<p>点击页面右上角的<kbd>服务</kbd>，选择<kbd>Gitee Pages</kbd>回到部署界面。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231222024946.png" alt="image-20201231222024946"></p>
<p>点击下面的<kbd>更新</kbd>，下图中红框圈出的就是你的博客地址了，格式为<code>https://&lt;你的用户名&gt;.github.io</code>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231222215450.png" alt="image-20201231222215450"></p>
<p>点击博客地址或者在浏览器输入博客地址。此时就可以看见我们刚创建的网页，其中的内容就是刚才写的内容。说明 Gitee Pages 服务已经正常。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231222626659.png" alt="image-20201231222626659"></p>
<h2 id="三、Gitee-Pages-发布"><a href="#三、Gitee-Pages-发布" class="headerlink" title="三、Gitee Pages 发布"></a>三、Gitee Pages 发布</h2><p>上一步 “测试  Gitee Pages 页面” 中，我们在 Gitee Pages 仓库目录下新建了一个<code>index.html</code>，就可以在自己的专属网址看到这个网页了。同理我们把自己的博客生成静态 html 网页，提交到这个仓库目录下，就可以在我们的网址看到博客页面了，这就是 Hexo 框架部署博客的原理。当然，对于 Hexo 来说，部署提交只需要几条命令。</p>
<h3 id="1-配置-Git-参数"><a href="#1-配置-Git-参数" class="headerlink" title="1. 配置 Git 参数"></a>1. 配置 Git 参数</h3><p>过程跟上篇文章一样，已经做过的步骤不用再重复，直接到复制公钥那一步。</p>
<p>在博客根目录下，右键，打开<kbd>Git Bash Here</kbd>。</p>
<p>配置用户名和邮箱，这两个参数用于 Git 提交时的身份识别。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 其中 username 和 username@XXX.com 是你注册 Gitee 的用户名和邮箱，如果账号不是邮箱注册的话，填自己的一个邮箱地址就行了</span></span><br><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;username@XXX.com&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229233907818.png" alt="image-20201229233907818"></p>
<p>生成 SSH keys，主要用于Git 提交时的权限控制和加密，本地根据 RSA 算法生成公私密钥对，然后将公钥添加到 Gitee 上，本机就可以提交代码到自己的 GitHub 库了。这个是根据当前使用的电脑的一些信息生成的，所以换电脑提交时要重新生成并添加。</p>
<p>输入下面命令，然后一直按<kbd>回车</kbd>，直到结束。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 其中 username@XXX.com 同上，是你的注册邮箱</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;username@XXX.com&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229233801498.png" alt="image-20201229233801498"></p>
<p>输入下面的命令，查看公钥内容，应该是一个<code>ssh-rsa</code>开头，以<code>你的邮箱</code>结尾的长字符串。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat后面的路径就是上图中的公钥文件路径，直接复制过来就可以。其中XXX是你的电脑用户名。</span></span><br><span class="line">cat /c/Users/XXX/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229234452012.png" alt="image-20201229234452012"></p>
<p>复制公钥内容（其实在<kbd>Git Bash</kbd>命令行里，默认选中文字松开鼠标就会自动把选中内容复制到剪贴板，点击鼠标中键是粘贴）。</p>
<p>打开自己的 Gitee 主页，点击右上角的头像，点击<kbd>设置</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231223248489.png" alt="image-20201231223248489"></p>
<p>点击<kbd>SSH公钥</kbd>。<code>标题</code>可以随便起一个名字，<code>公钥</code>填写上一步复制的公钥内容，然后点击<kbd>确定</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201231223630767.png" alt="image-20201231223630767"></p>
<p>最后执行下面的命令，测试一下 Git 参数是否配置成功。出现<code>你的用户名</code>和<code>successfully</code>字样，说明配置成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面的命令什么都不用改</span></span><br><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210101125339173.png" alt="image-20210101125339173"></p>
<h3 id="2-安装-Hexo-发布插件"><a href="#2-安装-Hexo-发布插件" class="headerlink" title="2. 安装 Hexo 发布插件"></a>2. 安装 Hexo 发布插件</h3><p>上一篇已经安装过可以跳过这一步。</p>
<p>在博客根目录下，右键，打开<kbd>Git Bash Here</kbd>。</p>
<p>输入下面的命令，安装<code>hexo-deployer-git</code>。（安装失败或者卡住，参考第一篇文章修改 npm 源。）</p>
<p>这个插件用于把生成好的静态页面上传到 Gitee Pages 仓库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201230001107308.png" alt="image-20201230001107308"></p>
<h3 id="3-发布"><a href="#3-发布" class="headerlink" title="3.  发布 ! ! !"></a>3.  发布 ! ! !</h3><p>从第一篇到现在这么多步骤过去了，可以说前面的所有操作都是在为最后的这一步<code>发布</code>做准备，现在终于到了见证奇迹的时刻了。</p>
<p>先别着急激动，让我们完成最最后一步配置，我们需要告诉 hexo 发布到哪里去，也就是把文件上传到哪个仓库。</p>
<p>打开博客<code>根目录配置文件</code>(<code>D:\MyBlog\_config.yaml</code>)，拉到文件最后一行，修改为下面的配置（没有的配置项自行添加），保存。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其中 xxxxxx 是前面多次用到的你的GitHub用户名，注意是master分支</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@gitee.com:xxxxxx/xxxxxx.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>OK，现在万事俱备了，执行下面的命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意最后变成d了，原来的s表示服务起在本地，现在的d表示部署在远端</span></span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>待命令执行完毕，还记得<strong>Gitee上提交后需要手动部署</strong>吗？此时需要按照<code>3. 测试  Gitee Pages 页面</code>的方法更新部署。</p>
<p>打开浏览器，输入网址<code>https://你的用户名.gitee.io</code>，可以看到一个和第一篇中本地部署的一模一样的博客出现了。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210102003427597.png" alt="image-20210102003427597"></p>
<p>之前为了测试而发布的文章也在。<code>https://你的用户名.gitee.io</code>就是你的个人博客地址了，其他人都可以访问。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20210102003454287.png" alt="image-20210102003454287"></p>
<h2 id="四、后续"><a href="#四、后续" class="headerlink" title="四、后续"></a>四、后续</h2><p>至此，我们从零开始搭建一个博客的任务初步完成了。</p>
<p>本篇文章介绍了利用 Gitee Pages 发布个人博客的方法，如果觉得 Gitee 每次发布博客需要手动更新太麻烦，可以参考上一篇文章，基于 Github Pages 搭建博客站点。</p>
<p>我看到许多人的博客搭建好了，一直停留在一开始初始化的状态，没有新增过一篇文章，希望大家别把最重要事情忘了，我们搭网站是为了写博客，一定要坚持下去。工欲善其事，必先利其器，接下来第四篇文章，介绍怎么更方便地写 Markdown 格式的博客。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始免费搭建自己的博客(二)——基于 GitHub pages 建站</title>
    <url>/2021/01/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%BA%8C-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-GitHub-pages-%E5%BB%BA%E7%AB%99/</url>
    <content><![CDATA[<blockquote>
<p>​    本文是博客搭建系列文章第二篇，其他文章链接：</p>
<ol>
<li>从零开始免费搭建自己的博客(一)——<a href="https://yushuaige.github.io/2020/12/31/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%80-%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/">本地搭建 Hexo 框架</a></li>
<li><strong>从零开始免费搭建自己的博客(二)——<a href="https://yushuaige.github.io/2021/01/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%BA%8C-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-GitHub-pages-%E5%BB%BA%E7%AB%99/">基于 GitHub pages 建站</a></strong></li>
<li>从零开始免费搭建自己的博客(三)——<a href="https://yushuaige.github.io/2021/01/02/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%89-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-Gitee-pages-%E5%BB%BA%E7%AB%99/">基于 Gitee pages 建站</a></li>
<li>从零开始免费搭建自己的博客(四)——编写Markdown文章利器 Typora</li>
<li>从零开始免费搭建自己的博客(五)——Typora + PicGo + GitHub/Gitee图床</li>
<li>从零开始免费搭建自己的博客(六)——三个站点一键发布博客</li>
<li>从零开始免费搭建自己的博客(七)——迁移 CSDN 博客到个人博客站点</li>
<li>从零开始免费搭建自己的博客(八)——博客网站个性化设置及优化</li>
</ol>
</blockquote>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在第一篇文章里，我们利用 Hexo 框架在本地搭建了一个精美的博客，可是只能本地访问，要想发布到互联网上，还需要将它部署在网站上。</p>
<p>博客的功能只要能阅读文章就够了，因此可以考虑将其部署在提供静态网页托管服务的网站上，这样就省去了购买服务器(云主机)，购买域名，购买大网 IP 这些步骤，不仅省钱，更重要的是省事儿。</p>
<p>当前云计算如此流行，许多平台都提供了静态网页托管服务，其中最方便的当然是 GitHub Pages，只需要注册一个账号就可以使用。GitHub Pages的服务器毕竟在国外，如果觉得访问太慢，也可以选择国内功能相似的 Gitee Pages。</p>
<p>本篇文章介绍怎样利用 GitHub 提供的免费静态网页托管服务 GitHub Pages 建站。</p>
<h2 id="一、-GitHub-Pages-简介"><a href="#一、-GitHub-Pages-简介" class="headerlink" title="一、 GitHub Pages 简介"></a>一、 GitHub Pages 简介</h2><p>GitHub 是世界上最流行的软件源代码托管服务平台，为什么要提供网页托管服务呢？</p>
<p>这是因为一个项目的主页如果只有源码，对新接触的人很不友好，不知从何处下手。虽然已经有了 readme.md 文件，但毕竟不如一个直观的网页来的直接。于是 GitHub 就设计了 Pages 功能，允许用户设计一个图文并茂的网页作为项目首页。</p>
<p>虽然 GitHub Pages 的初衷是提供自定义的项目首页，但是它的玩法不止这一个。因此许多博主都用这个功能来搭建自己的博客，因为它实在是太太方便了。</p>
<p>去GitHub Pages 官网 <a href="https://pages.github.com/">pages.github</a> ，拉到最后，可以看到官方也推荐使用 GitHub Pages 搭建博客，并且提供了示例教程。</p>
<h2 id="二、GitHub-Pages-准备"><a href="#二、GitHub-Pages-准备" class="headerlink" title="二、GitHub Pages 准备"></a>二、GitHub Pages 准备</h2><p>在发布之前，要先准备好自己的GitHub Pages 。</p>
<h3 id="1-注册-GitHub-账号"><a href="#1-注册-GitHub-账号" class="headerlink" title="1. 注册 GitHub 账号"></a>1. 注册 GitHub 账号</h3><p>首先需要注册一个 GitHub 账号，如果已经有账号直接看下一步。</p>
<p>打开 GitHub 官网：<a href="https://github.com/">github.com</a>。如果这里打开速度已经不容忍受了，建议直接看下一篇使用 Gitee 建站。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229223941265.png" alt="image-20201229223941265"></p>
<p>点击右上角<kbd>Sign up</kbd>注册，填写用户名，邮箱，密码。注意，此处用户名是唯一ID，建议取个有意义的名字。点击注册后会发送一封验证邮件到填写的邮箱，登录自己的邮箱点击链接进行验证，GitHub 账号就注册好了。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229224251159.png" alt="image-20201229224251159"></p>
<h3 id="2-创建-GitHub-Pages-仓库"><a href="#2-创建-GitHub-Pages-仓库" class="headerlink" title="2. 创建 GitHub Pages 仓库"></a>2. 创建 GitHub Pages 仓库</h3><p>点击右上角<kbd>Sign in</kbd>登录后，点击左上角<kbd>New</kbd>新建仓库。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229224505117.png" alt="image-20201229224505117"></p>
<p>由于每个 GitHub 账户只能建立一个 GitHub Pages 页面，所以 Repository name 必须填<code>&lt;你的用户名&gt;.github.io</code>，否则就会建立一个普通仓库，GitHub Pages 功能不会生效。比如用户名是<code>jacksparrow</code>，Repository name 这里就填<code>jacksparrow.github.io</code>，不知道用户名是哪个，可以点击页面右上角头像，看到第一行“Signed in as <code>xxx</code>”字样， <code>xxx</code>即为这里的用户名。</p>
<p>Description 填写仓库描述，比如 <code>jacksparrow&#39;s blog</code>等，可不填。</p>
<p>注意勾选 <code>Public</code> ，否则 GitHub Pages 功能不会生效。建议勾选 <code>Add a README file</code>，会自动生成一个 <code>readme.md</code>文件。</p>
<p>最后点击<kbd>Create repository</kbd>创建仓库。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229224741804.png" alt="image-20201229224741804"></p>
<h3 id="3-测试-GitHub-Pages-页面"><a href="#3-测试-GitHub-Pages-页面" class="headerlink" title="3. 测试  GitHub Pages 页面"></a>3. 测试  GitHub Pages 页面</h3><p>创建 GitHub Pages 仓库后，为了测试能否访问 GitHub Pages 服务，我们给它添加一个静态网页。</p>
<p>点击<kbd>Add file</kbd> – <kbd>Create new file</kbd>在仓库下新建文件。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229225208056.png" alt="image-20201229225208056"></p>
<p>输入文件名<code>index.html</code>，在下面输入内容<code>&lt;h1&gt;Hello My Blog!&lt;/h1&gt;</code>，这是 html 标记语言，表示一级标题。</p>
<p>其他保持默认，点击最下面<kbd>Commit new file</kbd>提交文件到仓库。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229225639083.png" alt="image-20201229225639083"></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229225731351.png" alt="image-20201229225731351"></p>
<p>然后在浏览器打开一个新的网页，输入网址<code>https://&lt;你的用户名&gt;.github.io</code>，就可以看见我们刚创建的网页，其中的内容就是刚才写的内容。说明 GitHub Pages 服务已经正常。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229230057034.png" alt="image-20201229230057034"></p>
<h2 id="三、GitHub-Pages-发布"><a href="#三、GitHub-Pages-发布" class="headerlink" title="三、GitHub Pages 发布"></a>三、GitHub Pages 发布</h2><p>上一步 “测试  GitHub Pages 页面” 中，我们在 GitHub Pages 仓库目录下新建了一个<code>index.html</code>，就可以在自己的专属网址看到这个网页了。同理我们把自己的博客生成静态 html 网页，提交到这个仓库目录下，就可以在我们的网址看到博客页面了，这就是 Hexo 框架部署博客的原理。当然，对于 Hexo 来说，提交部署只需要几条命令。</p>
<h3 id="1-配置-Git-参数"><a href="#1-配置-Git-参数" class="headerlink" title="1. 配置 Git 参数"></a>1. 配置 Git 参数</h3><p>在博客根目录下，右键，打开<kbd>Git Bash Here</kbd>。</p>
<p>配置用户名和邮箱，这两个参数用于 Git 提交时的身份识别。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 其中 username 和 username@XXX.com 是你注册 GitHub 的用户名和邮箱</span></span><br><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;username@XXX.com&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229233907818.png" alt="image-20201229233907818"></p>
<p>生成 SSH keys，主要用于Git 提交时的权限控制和加密，本地根据 RSA 算法生成公私密钥对，然后将公钥添加到 GitHub 上，本机就可以提交代码到自己的 GitHub 库了。这个是根据当前使用的电脑的一些信息生成的，所以换电脑提交时要重新生成并添加。</p>
<p>输入下面命令，然后一直按<kbd>回车</kbd>，直到结束。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 其中 username@XXX.com 是你注册 GitHub 的邮箱</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;username@XXX.com&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229233801498.png" alt="image-20201229233801498"></p>
<p>输入下面的命令，查看公钥内容，应该是一个<code>ssh-rsa</code>开头，以<code>你的邮箱</code>结尾的长字符串。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat后面的路径就是上图中的公钥文件路径，直接复制过来就可以</span></span><br><span class="line">cat /c/Users/XXX/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229234452012.png" alt="image-20201229234452012"></p>
<p>复制公钥内容（其实在<kbd>Git Bash</kbd>命令行里，默认选中文字松开鼠标就会自动把选中内容复制到剪贴板，默认鼠标中键是粘贴）。</p>
<p>打开自己的 Github 主页，点击右上角的头像，点击<kbd>Settings</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229235035462.png" alt="image-20201229235035462"></p>
<p>点击<kbd>SSH and GPG keys</kbd>，然后点击<kbd>New SSH keys</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229235220955.png" alt="image-20201229235220955"></p>
<p>Title 可以随便起一个名字，Key 填写上一步复制的公钥内容，然后点击<kbd>Add SSH key</kbd>。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229235704322.png" alt="image-20201229235704322"></p>
<p>最后执行下面的命令，测试一下 Git 参数是否配置成功。出现<code>你的用户名</code>和<code>successfully</code>字样，说明配置成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面的命令什么都不用改</span></span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201230000424483.png" alt="image-20201230000424483"></p>
<h3 id="2-安装-Hexo-发布插件"><a href="#2-安装-Hexo-发布插件" class="headerlink" title="2. 安装 Hexo 发布插件"></a>2. 安装 Hexo 发布插件</h3><p>在博客根目录下，右键，打开<kbd>Git Bash Here</kbd>。</p>
<p>输入下面的命令，安装<code>hexo-deployer-git</code>。（安装失败或者卡住，参考第一篇文章修改 npm 源。）</p>
<p>这个插件用于把生成好的静态页面上传到 GitHub Pages 仓库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201230001107308.png" alt="image-20201230001107308"></p>
<h3 id="3-发布"><a href="#3-发布" class="headerlink" title="3.  发布 ! ! !"></a>3.  发布 ! ! !</h3><p>从第一篇到现在这么多步骤过去了，可以说前面的所有操作都是在为最后的这一步<code>发布</code>做准备，现在终于到了见证奇迹的时刻了。</p>
<p>先别着急激动，让我们完成最最后一步配置，我们需要告诉 hexo 发布到哪里去，也就是把文件上传到哪个仓库。</p>
<p>打开博客<code>根目录配置文件</code>(<code>D:\MyBlog\_config.yaml</code>)，拉到文件最后一行，修改为下面的配置（没有的配置项自行添加），保存。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其中 xxxxxx 是前面多次用到的你的GitHub用户名</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xxxxxx/xxxxxx.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
<p>OK，现在万事俱备了，执行下面的命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意最后变成d了，原来的s表示服务起在本地，现在的d表示部署在远端</span></span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>待命令执行完毕，打开浏览器，输入网址<code>https://你的用户名.github.io</code>，可以看到一个和第一篇中本地部署的一模一样的博客出现了。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201230002849289.png" alt="image-20201230002849289"></p>
<p>之前为了测试而发布的文章也在。<code>https://你的用户名.github.io</code>就是你的个人博客地址了，其他人都可以访问。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201230003033418.png" alt="image-20201230003033418"></p>
<h2 id="四、后续"><a href="#四、后续" class="headerlink" title="四、后续"></a>四、后续</h2><p>至此，我们从零开始搭建一个博客的任务初步完成了。</p>
<p>本篇文章介绍了利用 GitHub Pages 发布个人博客的方法，如果觉得 GitHub 访问速度太慢，可以参考下面一篇文章，基于 Gitee Pages 搭建国内博客站点。如果觉得 GitHub Pages 很满意了，可以关注本系列后续文章，会继续介绍怎么更方便地写博客、老博客迁移到新站点以及主题个性化设置等内容。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始免费搭建自己的博客(一)——本地搭建hexo框架</title>
    <url>/2020/12/31/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%80-%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<blockquote>
<p>​    本文是博客搭建系列文章第一篇，其他文章链接：</p>
<ol>
<li><strong>从零开始免费搭建自己的博客(一)——<a href="https://yushuaige.github.io/2020/12/31/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%80-%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/">本地搭建 Hexo 框架</a></strong></li>
<li>从零开始免费搭建自己的博客(二)——<a href="https://yushuaige.github.io/2021/01/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%BA%8C-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-GitHub-pages-%E5%BB%BA%E7%AB%99/">基于 GitHub pages 建站</a></li>
<li>从零开始免费搭建自己的博客(三)——<a href="https://yushuaige.github.io/2021/01/02/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-%E4%B8%89-%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E-Gitee-pages-%E5%BB%BA%E7%AB%99/">基于 Gitee pages 建站</a></li>
<li>从零开始免费搭建自己的博客(四)——编写Markdown文章利器 Typora</li>
<li>从零开始免费搭建自己的博客(五)——Typora + PicGo + GitHub/Gitee图床</li>
<li>从零开始免费搭建自己的博客(六)——三个站点一键发布博客</li>
<li>从零开始免费搭建自己的博客(七)——迁移 CSDN 博客到个人博客站点</li>
<li>从零开始免费搭建自己的博客(八)——博客网站个性化设置及优化</li>
</ol>
</blockquote>
<hr>
<h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>本文思路：使用 Hexo 框架搭建网站，发布到 GitHub pages 或者 Gitee pages .</p>
<p>首先先看一下最终效果：</p>
<p>GitHub pages 链接(国际站点)：<a href="https://yushuaige.github.io/">杰克小麻雀的博客</a><br>Gitee pages 链接(国内站点)：<a href="https://yushuaigee.gitee.io/">杰克小麻雀的博客</a></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/myblog.gif" alt="myblog"></p>
<hr>
<h2 id="一、Hexo-框架简介"><a href="#一、Hexo-框架简介" class="headerlink" title="一、Hexo 框架简介"></a>一、Hexo 框架简介</h2><p>首先，都 0202 年了，我们想搭建一个网站，当然不用自己从头开始写 html，因为有许多开源的代码可以供我们选择。Hexo 就是一个专门用于博客类网站的开源项目，使用 Node.js 语言开发，GitHub 上目前已经有 31.8k 的 star 了，现在网上大多数的个人博客都是使用这个框架搭建的。Hexo不仅搭建过程简单快捷，配置灵活，可定制型非常高，因此众多大佬开发者为它开发了丰富的主题库，而作为菜鸟我们只需要选择一个符合自己审美的主题直接用就行了，当然如果你懂前端和 js ，也可以自己修改定制，或者自己制作主题并分享到互联网上。</p>
<p> Hexo 中文官网：<a href="https://hexo.io/zh-cn/">hexo.io</a> ，GitHub 地址：<a href="https://github.com/hexojs/hexo">hexojs/hexo</a> 。</p>
<h2 id="二、Hexo-依赖环境安装-：Node-js"><a href="#二、Hexo-依赖环境安装-：Node-js" class="headerlink" title="二、Hexo 依赖环境安装 ：Node.js"></a>二、Hexo 依赖环境安装 ：Node.js</h2><p>Hexo 是使用 Node.js 开发的，所以我们安装 Hexo 之前需要先安装 Node.js 环境。</p>
<p>Node.js 是什么？简单的说 Node.js 就是运行在服务端的 JavaScript 。安装了 Node.js 环境，就可以不用依赖浏览器就可以运行 js 代码，其实它也是基于 Chrome 引擎开发的一个开源项目。简单理解， Node.js 对于 js 代码的作用类似 Python 解释器对于 Python 代码的作用。</p>
<p>这里注意，不是说博客框架必须用 Node.js 来开发，博客框架本质上是一个网站，可以用任何语言开发，也有用 Python 的 Flask/Django 或者 Java 开发的博客框架，只是没有 Hexo 这么流行。</p>
<h3 id="1-官网下载-Node-js"><a href="#1-官网下载-Node-js" class="headerlink" title="1. 官网下载  Node.js"></a>1. 官网下载  Node.js</h3><p>Node.js 中文官网：<a href="https://nodejs.org/zh-cn/">nodejs.org</a></p>
<p>打开官网直接下载安装包就行了，左边是稳定版，右边是尝鲜版。任选一个点击下载，尝鲜版包含了比较新的特性，但是没有经过充分测试。我这里下载了 15.4.0 版本。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220164653416.png" alt="image-20201220164653416"></p>
<p>我这里是用浏览器自带下载器，下载速度还可以，如果没速度可以在下载按钮上右键，选择“复制链接地址”，然后粘贴到迅雷下载。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220165109254.png" alt="image-20201220165109254"></p>
<h3 id="2-安装-Node-js"><a href="#2-安装-Node-js" class="headerlink" title="2. 安装  Node.js"></a>2. 安装  Node.js</h3><p>下载完安装包后双击打开，一路点 Next 就行了。注意这一步是安装额外工具，没必要勾选。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220165451877.png" alt="image-20201220165451877"></p>
<h3 id="3-测试-Node-js-是否安装成功"><a href="#3-测试-Node-js-是否安装成功" class="headerlink" title="3. 测试 Node.js 是否安装成功"></a>3. 测试 Node.js 是否安装成功</h3><p>安装完成后，<kbd>Win</kbd> + <kbd>R</kbd> 打开运行框，输入<code>cmd</code>打开命令行窗口，输入<code>npm -v</code>回车，如果出现版本号说明安装成功。就跟安装完 Python 解释器一样，npm 就类似 Python 中的 pip 工具。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220170553434.png" alt="image-20201220170553434"></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220180008301.png" alt="image-20201220180008301"></p>
<h2 id="三、Hexo-依赖环境安装-：Git"><a href="#三、Hexo-依赖环境安装-：Git" class="headerlink" title="三、Hexo 依赖环境安装 ：Git"></a>三、Hexo 依赖环境安装 ：Git</h2><p>作为程序员，Git 应该不陌生，如果你已经安装了 Git，那这一步可以跳过。</p>
<p>Git（读音/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。简单理解就是下载代码的工具，因为 Hexo 是一个托管于 GitHub 上的开源项目，所以安装 Hexo 的时候需要使用 Git 来下载源码和依赖代码，而且后面要将自己的博客发布到 GitHub pages 或者 Gitee pages 上面也需要使用 Git。</p>
<h3 id="1-官网下载-Git"><a href="#1-官网下载-Git" class="headerlink" title="1. 官网下载  Git"></a>1. 官网下载  Git</h3><p>Git 官网：<a href="https://git-scm.com/">git</a></p>
<p>打开官网直接下载安装包就行了。由于网络环境原因，浏览器下载可能会非常慢，可以按照上面的方法，在下载按钮上右键，选择“复制链接地址”，然后粘贴到迅雷下载。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220171653488.png" alt="image-20201220171653488"></p>
<h3 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2. 安装  Git"></a>2. 安装  Git</h3><p>下载完安装包后双击打开，没有特殊需要的话，一路点 Next 就行了。安装完毕，在桌面空白处右键，可以看到多了两个选项。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220172655709.png" alt="image-20201220172655709"></p>
<h3 id="3-测试-Git-是否安装成功"><a href="#3-测试-Git-是否安装成功" class="headerlink" title="3.  测试 Git 是否安装成功"></a>3.  测试 Git 是否安装成功</h3><p>Git 安装完成后，自带了一个命令行窗口，通过上面新增的右键菜单<kbd>Git Bash Here</kbd>就可以打开，比 Windows自带的命令行要好用，后面都使用这个命令行窗口。在桌面空白处右键，选择<kbd>Git Bash Here</kbd>，输入<code>git --version</code>回车，如果出现版本号说明安装成功</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220175806607.png" alt="image-20201220175806607"></p>
<h2 id="四、安装-Hexo"><a href="#四、安装-Hexo" class="headerlink" title="四、安装 Hexo"></a>四、安装 Hexo</h2><p>下面开始正式安装 Hexo，有了前面的准备工作，安装 Hexo 就非常简单了，就跟使用 pip 安装一个 Python 第三方库一样方便。</p>
<h3 id="1-本地安装-hexo"><a href="#1-本地安装-hexo" class="headerlink" title="1. 本地安装 hexo"></a>1. 本地安装 hexo</h3><p>首先在本地新建一个空文件夹，用来存放 Hexo 的文件和以后要写的博客文件，注意不要有中文路径，避免可能出现的问题。我这里建立在 D 盘根目录，取名 MyBlog。</p>
<p>进入新建的文件夹，右键，选择<kbd>Git Bash Here</kbd>，依次输入下面的命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 hexo 框架</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化文件夹</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 hexo 依赖包</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>命令很好理解，第一行安装 hexo 模块，<code>-g</code>表示安装全局模块；第二行是 hexo 初始化，会用 <code>git clone</code>命令去 GitHub 下载一个 hexo 默认模板代码库；第三行是安装依赖包，类似安装 pip 的 requirement 文件，会根据刚下载的代码库中的配置文件，下载并安装所需依赖包。安装成功结果，如下图。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220175707251.png" alt="image-20201220175707251"></p>
<h3 id="2-可能遇到的问题"><a href="#2-可能遇到的问题" class="headerlink" title="2. 可能遇到的问题"></a>2. 可能遇到的问题</h3><ul>
<li><p><strong><code>npm install -g hexo-cli</code>命令执行卡住，或者报错连接不上</strong></p>
<p>可能是 npm 源速度太慢，可以尝试修改淘宝源解决，再重新执行安装命令。npm 源的概念就和 Python 中的 pip 源一样，默认源是<code>https://registry.npmjs.org/</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 npm 源</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="meta">#</span><span class="bash"> 临时修改 npm 源安装 hexo (仅本条命令有效)</span></span><br><span class="line">npm --registry=https://registry.npm.taobao.org install -g hexo-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者永久修改 npm 源</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>如果是公司内网使用代理访问外网 (比如<code>ping registry.npmjs.org</code> <code>ping registry.npm.taobao.org</code>都不通)，可以尝试给 npm 配置代理解决，再重新执行安装命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置代理</span></span><br><span class="line">npm config set proxy http://serverip:port</span><br><span class="line">npm confit set https-proxy http:/serverip:port</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置带用户名密码的代理</span></span><br><span class="line">npm config set proxy http://username:password@serverip:port</span><br><span class="line">npm confit set https-proxy http://username:password@serverip:port</span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消代理</span></span><br><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure></li>
<li><p><strong><code>hexo init</code>命令执行卡住，或者报错连接不上</strong></p>
<p>如果是公司内网使用代理访问外网 (比如<code>ping GitHub.com</code> 不通)，可以尝试给 git 配置代理解决，再重新执行初始化命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置代理</span></span><br><span class="line">git config --global http.proxy http://serverip:port</span><br><span class="line">git config --global https.proxy http:/serverip:port</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置带用户名密码的代理</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：如果密码中带了特殊字符需要进行转义, 将特殊字符替换为下面对应的转义字符即可</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  !   <span class="comment">#   $   &amp;   &#x27;   (    )  *   +   ,   /   :   ;   =   ?   @   [   ]</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> %21 %23 %24 %26 %27 %28 %29 %2A %2B %2C %2F %3A %3B %3D %3F %40 %5B %5D</span></span><br><span class="line">npm config set proxy http://username:password@serverip:port</span><br><span class="line">npm confit set https-proxy http://username:password@serverip:port</span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消代理</span></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
<h3 id="3-本地博客效果"><a href="#3-本地博客效果" class="headerlink" title="3. 本地博客效果"></a>3. 本地博客效果</h3></li>
</ul>
<p>前面三条命令执行成功，Hexo 框架在本地就已经搭建好了，下面看看效果。</p>
<p>还是在<kbd>Git Bash</kbd>命令行窗口里，依次执行下面的命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成静态网站</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务器</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>或者直接执行<code>hexo g &amp;&amp; hexo s</code>，其中<code>hexo g</code>是 <code>hexo generate</code>命令的简写，<code>hexo s</code>是 <code>hexo server</code>命令的简写。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220204316929.png" alt="image-20201220204316929"></p>
<p>此时，打开浏览器，输入网址<code>http://localhost:4000/</code>，就可以看到我们 Hexo 搭建的博客示例了。此时是默认主题，比较简洁，下一步我们换一个更精美的主题。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220204625063.png" alt="image-20201220204625063"></p>
<h2 id="五、更换-Hexo-博客主题"><a href="#五、更换-Hexo-博客主题" class="headerlink" title="五、更换 Hexo  博客主题"></a>五、更换 Hexo  博客主题</h2><h3 id="1-如何找主题"><a href="#1-如何找主题" class="headerlink" title="1. 如何找主题"></a>1. 如何找主题</h3><p>默认主题非常简洁，适合大佬使用，像我等菜鸟，自己不会做却又想使用花里胡哨的主题，就要学会找主题了。</p>
<p>下面是我寻找主题的三个方法。</p>
<ul>
<li><p><strong>官方网站</strong></p>
<p>Hexo 官网收录了几百个第三方主题，其中有许多中文开发者开发的主题。</p>
<p>在 Hexo 官网点击“主题”，或者直接进入 Hexo 主题页：<a href="https://hexo.io/themes/">themes</a></p>
<p>通过上方的搜索框可以根据标签搜索。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201222231238616.png" alt="image-20201222231238616"></p>
</li>
<li><p><strong>Github 搜索</strong></p>
<p>大多数流行的主题都在 GitHub 托管开源了，我们可以直接去 GitHub  下载。</p>
<p>在 Github 官网搜索<code>hexo-theme</code>，选择<code>All GitHub</code>，或者直接进入搜索页：<a href="https://github.com/search?q=hexo-theme">search?q=hexo-theme</a></p>
<p>点击右上角<code>Sort</code>可以选择按<code>Most stars</code>数量排序，根据流行程度找到心仪的主题。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201222231133883.png" alt="image-20201222231133883"></p>
</li>
<li><p><strong>网上搜索</strong></p>
<p>直接在搜索引擎搜索<code>Hexo主题推荐</code>，会有许多别人推荐的主题，不过大多数的推荐前面两种方法都能覆盖到，偶尔也能发现一些冷门却又戳中你的审美的宝藏，这就看耐心和运气了。</p>
</li>
</ul>
<h3 id="2-主题推荐"><a href="#2-主题推荐" class="headerlink" title="2. 主题推荐"></a>2. 主题推荐</h3><p>我挑选了几个自己觉得简单美观而又不过分花哨的主题，其实都是 GitHub 热门的，很好发现。这些主题都太漂亮了，以至于我都不知道该选哪个，额。</p>
<p>下面几个主题切换时可能会遇到一些问题，多数是依赖包未安装完整的原因，解决办法见<code>4. 出错解决办法</code>。</p>
<ul>
<li><p><strong>Next</strong></p>
<p>Demo 示例：<a href="https://theme-next.js.org/">NexT</a> | <a href="https://dandyxu.me/">Dandy</a> | <a href="https://raincal.com/">Raincal</a> </p>
<p>GitHub 主页：<a href="https://github.com/iissnan/hexo-theme-next">hexo-theme-next</a></p>
<p>这个是 Hexo 最流行的主题，GitHub 上 15.5k stars，在 Hexo 主题中排行第一。</p>
<p>这个主题跟默认主题一样简洁，但是却漂亮了很多，尤其是文章浏览界面，排版非常干净舒服，大佬必备。</p>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201221224929253.png" alt="image-20201221224929253"></p>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201221222603632.png" alt="image-20201221222603632"></p>
<hr>
</li>
</ul>
<ul>
<li><p><strong>stun</strong></p>
<p>Demo 示例：<a href="https://liuyib.github.io/">Liuyib’s Blog</a></p>
<p>GitHub 主页：<a href="https://github.com/liuyib/hexo-theme-stun">hexo-theme-stun</a></p>
<p>这是一个漂亮、简洁的 Hexo 主题，增加了首页图片，和白天黑夜模式，最重要的是文章浏览界面非常干净美观。我就是看到一篇博客使用的这个主题，特别漂亮，才有了想自己搭博客的强烈愿望。</p>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/test-1608904463540.gif" alt="test"></p>
<hr>
<p>文章浏览界面：</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/test-1608904209387.gif" alt="test"></p>
<hr>
</li>
</ul>
<ul>
<li><p><strong>matery</strong></p>
<p>Demo 示例：<a href="http://blinkfox.com/">闪烁之狐</a></p>
<p>GitHub 主页：<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></p>
<p>同样是一个很漂亮的主题，除了首页的图片，它会为每一篇文章添加一张非常漂亮的封面图，而且集成了很多强大的功能插件，比喻词云，访问统计，音乐播放，视频播放，在线聊天等等。</p>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/test-1608995730975.gif" alt="test"></p>
<hr>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/test-1608995969178.gif" alt="test"></p>
<hr>
</li>
</ul>
<ul>
<li><p><strong>butterfly</strong></p>
<p>Demo 示例： <a href="https://butterfly.js.org/">Butterfly</a> |  <a href="https://jerryc.me/">JerryC</a></p>
<p>GitHub 主页：<a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a></p>
<p>这个主题和上面这个同样强大、漂亮，且色彩更加丰富。</p>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201226233544278.png" alt="image-20201226233544278"></p>
<hr>
<p>![Butterfly - A Simple and Card UI Design theme for ](<a href="https://yushuaigee.gitee.io/myblog/img/Butterfly">https://yushuaigee.gitee.io/myblog/img/Butterfly</a> - A Simple and Card UI Design theme for .png)</p>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/test-1608997237304.gif" alt="test"></p>
<hr>
</li>
</ul>
<ul>
<li><p><strong>ayer</strong></p>
<p>Demo 示例：<a href="https://shen-yu.gitee.io/">岛</a></p>
<p>GitHub 主页：<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-ayer</a></p>
<p>这个主题在这几个里面算是最小众的，但是功能却不少，界面比较简洁，我就选择了这一款主题。</p>
<hr>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/test-1608998694257.gif" alt="test"></p>
<hr>
<p><img src="https://yushuaigee.gitee.io/myblog/img/test-1608998820660.gif" alt="test"></p>
<hr>
</li>
</ul>
<h3 id="3-更换主题"><a href="#3-更换主题" class="headerlink" title="3. 更换主题"></a>3. 更换主题</h3><p>以 <strong>ayer</strong> 主题为例。</p>
<p>在 Hexo 博客根目录(<code>D:\MyBlog</code>)下，右键，选择<code>Git Bash Here</code>，执行下面命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载主题仓库到 themes 文件夹， git <span class="built_in">clone</span> &lt;仓库地址&gt; themes/&lt;主题名&gt;</span> </span><br><span class="line">git clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure>
<p>其中，&lt;仓库地址&gt;可以在每个主题的 GitHub 主页获取到。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201222231736247.png" alt="image-20201222231736247"></p>
<p>此时打开博客根目录下的 themes 文件夹可以看到多了个 ayer 文件夹。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201222231910652.png" alt="image-20201222231910652"></p>
<p>然后用记事本打开博客根目录下的 _config.yml (<code>D:\MyBlog\_config.yml</code>)，找到<code>theme</code>标签，默认值是<code>landscape</code>主题，把它改为要更换的主题名字<code>ayer</code>，然后执行启动命令。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">ayer</span></span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理 &amp;&amp; 生成 &amp;&amp; 启动</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201222232806309.png" alt="image-20201222232806309"></p>
<p>此时再到浏览器打开网址<code>http://localhost:4000</code>，可以看到我们的博客已经换上一款非常精美的主题。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/Hexo-1608650994521.png" alt="Hexo"></p>
<h3 id="4-出错解决办法"><a href="#4-出错解决办法" class="headerlink" title="4. 出错解决办法"></a>4. 出错解决办法</h3><ul>
<li><p><strong>Next</strong></p>
<p>打开网页<code>http://localhost:4000</code>出现下面的错误，是因为没有安装依赖库<code>hexo-renderer-swig</code></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201221221407462.png" alt="image-20201221221407462"></p>
<p>先 <kbd>Ctrl</kbd> + <kbd>C</kbd> 停止，执行下面命令安装swig，再执行<code>hexo g &amp;&amp; hexo s</code>重新发布。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-swig</span><br></pre></td></tr></table></figure></li>
<li><p><strong>stun</strong></p>
<p>打开网页<code>http://localhost:4000</code>出现下面的错误，是因为没有安装依赖库<code>hexo-renderer-pug</code></p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201221223418827.png" alt="image-20201221223418827"></p>
<p>先 <kbd>Ctrl</kbd> + <kbd>C</kbd> 停止，执行下面命令安装pug，再执行<code>hexo g &amp;&amp; hexo s</code>重新发布。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug</span><br></pre></td></tr></table></figure>
<h3 id="5-修改主题"><a href="#5-修改主题" class="headerlink" title="5. 修改主题"></a>5. 修改主题</h3></li>
</ul>
<p>更换主题后，我们需要修改一些基本属性，比如博客名字、首页图片等，或者增加一些个性化属性，比如鼠标指针样式，雪花特效，点击特效等。本篇文章先介绍一下如何修改基本属性，以便于接下来发布网站，在本系列文章第七篇再介绍高级的个性化设置。</p>
<p>Hexo 的配置大部分都保存在博客根目录下的<code>_config.yml</code>文件，我这里是<code>D:\MyBlog\_config.yml</code>，我们叫它<code>根目录配置文件</code>，直接修改这个文件就可以更改博客的一些设置，像前面更换主题就是修改这个文件的参数实现的。关于这个文件的每个参数的详细意义，可以在 <a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>里查看，每一个参数都有示例，讲解的非常详细。</p>
<p>此外，下载的第三方主题的根目录下也有一个<code>_config.yml</code>文件，比如 <strong>ayer</strong> 主题，我这里就是<code>D:\MyBlog\themes\ayer\_config.yml</code>文件，我们叫它<code>主题配置文件</code>。关于这个文件每个参数的详细意义，可以在每个主题的 GitHub 主页看到详细说明。</p>
<p>如果你使用的是自带的默认主题，那么所有配置都应该在<code>根目录配置文件</code>修改。如果是用的是第三方那个主题，需要两个文件配合修改。</p>
<p>以 <strong>ayer</strong> 主题为例。</p>
<p>首先，按上面第3步更换主题的方法，将<code>根目录配置文件</code>的 theme 属性设置为对应的主题名字 <code>ayer</code>。打开<code>根目录配置文件</code>(D:\MyBlog_config.yml)。</p>
<p>修改第6/10/11行，修改博客基本信息。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 博客标题，冒号后面自定义</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">半亩方塘</span></span><br><span class="line"><span class="comment"># 博客作者，冒号后面自定义</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">杰克小麻雀</span></span><br><span class="line"><span class="comment"># 网站语言，zh-CN 表示中文，en表示英文。不改成 zh-CN，某些浏览器总会提示是否需要翻译网页</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>
<p>然后，参考 <strong>ayer</strong> 主题官方帮助文档 <a href="https://shen-yu.gitee.io/2019/ayer/">Ayer中文说明</a>。打开 <strong>ayer</strong> 主题的<code>主题配置文件</code>(D:\MyBlog\themes\ayer_config.yml)。</p>
<p>修改第 2 ~ 10行，关掉不需要的侧边栏。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags</span></span><br><span class="line"><span class="comment">#  旅行: /tags/旅行/</span></span><br><span class="line"><span class="comment">#  摄影: http://shenyu-vip.lofter.com</span></span><br><span class="line"><span class="comment">#  友链: /friends</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/2019/about</span></span><br></pre></td></tr></table></figure>
<p>修改第 14 ~ 18行，自定义首页滚动显示的标题。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启动效</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">欢迎来到杰克小麻雀的博客</span></span><br><span class="line">  <span class="attr">text2:</span> <span class="string">临渊羡鱼，不如退而结网</span> </span><br><span class="line">  <span class="attr">text3:</span> <span class="string">问渠哪得清如许,为有源头活水来</span></span><br></pre></td></tr></table></figure>
<p>修改第 26 ~ 27行，修改网站图标和侧边栏logo。只需要把自己的图标文件按覆盖原来的文件，完整目录为<code>‪D:\MyBlog\themes\ayer\source\favicon.ico</code>。关于图标，推荐一个可以下载各种尺寸图标的网站： <a href="https://www.easyicon.net/">easyicon</a>，也可以把自己准备好的图片进行在线格式转换： <a href="https://convertio.co/zh/ico-converter/">在线ico转换</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 浏览器标签栏显示图标</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span> </span><br><span class="line"><span class="comment"># 首页侧边栏图标</span></span><br><span class="line"><span class="attr">logo:</span> <span class="string">/favicon.ico</span></span><br></pre></td></tr></table></figure>
<p>修改第 31 ~ 34行，更换封面为自己的图片。先将自己准备好的封面图片 <code>cover8.jpg</code> 放到<code>D:\MyBlog\themes\ayer\source\images</code>目录下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/images/cover8.jpg</span></span><br><span class="line">  <span class="attr">logo:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>第 125 行，关闭右上角的 GitHub forkme。在这个背景下有点丑。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">github:</span></span><br><span class="line">  <span class="comment"># (关闭请设置为false)</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/Shen-Yu/hexo-theme-ayer</span></span><br></pre></td></tr></table></figure>
<p>第 83 行，关闭打赏。如果不改下面的图片，你的打赏就直接给主题作者了哦，我没有改打赏图片，所以直接关了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reward_type: 0</span><br></pre></td></tr></table></figure>
<p>以上只修改了一些最最基本的配置，毕竟先发布网站要紧，其他配置可以慢慢来，建议看一下主题配置文件的每一行注释以及官方文档。</p>
<p>改完后，执行<code>hexo g &amp;&amp; hexo s</code>，刷新网页看下效果：</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201227192058171.png" alt="image-20201227192058171"></p>
<h2 id="六、本地发布文章"><a href="#六、本地发布文章" class="headerlink" title="六、本地发布文章"></a>六、本地发布文章</h2><p>博客搭建好了，可是现在只有示例的<code>Hello World</code>一篇文章，怎么发布自己的文章呢？</p>
<h3 id="1-新建文章"><a href="#1-新建文章" class="headerlink" title="1. 新建文章"></a>1. 新建文章</h3><p>在博客根目录下右键，选择<kbd>Git Bash Here</kbd>，输入下面命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;我的第一篇博客&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201227193541930.png" alt="image-20201227193541930"></p>
<p>此时进入博客根目录下的<code>source\_posts</code>(D:\MyBlog\source_posts)文件夹，可以看到多了一个<code>我的第一篇博客.md</code>文件，这便是新生成的博客文章，因为 Hexo 默认使用 Markdown 格式，所以文件后缀是md，可以使用记事本或者<code>Typora</code>打开并编辑。关于 Markdown 语法和<code>Typora</code>软件的使用，将在本系列文章第四篇中介绍。</p>
<p>此时先 <kbd>Ctrl</kbd> + <kbd>C</kbd> 停止服务器，执行<code>hexo g &amp;&amp; hexo s</code>重新部署，刷新<code>http://localhost:4000/</code>，可以看到博客上多了一篇文章。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201227195815659.png" alt="image-20201227195815659"></p>
<h3 id="2-修改模板"><a href="#2-修改模板" class="headerlink" title="2. 修改模板"></a>2. 修改模板</h3><p>打开新建的文章<code>我的第一篇博客.md</code>，可以看到它并不是空的，可是页面上却显示为空，因为 Hexo 根据默认模板帮我们自动生成了一些参数，比如文章创建时间等。这个模板是可更改的。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201227194608547.png" alt="image-20201227194608547"></p>
<p>这就需要修改<code>根目录配置文件</code>(‪D:\MyBlog_config.yml)的<code>new_post_name</code>参数了，其中year month day 分别表示创建文章的年月日，这样，再新建文章时，文件名将会自动加上年月日信息，便于通过日期来管理文章。当然，这个时间后面也是可以修改的。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year-:month-:day-:title.md</span></span><br></pre></td></tr></table></figure>
<p>编辑上面打开的文章<code>我的第一篇博客.md</code>，添加一些正文，并改一下自动生成三个参数。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201227201533968.png" alt="image-20201227201533968"></p>
<p>此时先 <kbd>Ctrl</kbd> + <kbd>C</kbd> 停止服务器，执行<code>hexo g &amp;&amp; hexo s</code>重新部署，刷新<code>http://localhost:4000/</code>，看看效果。</p>
<p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201227201741602.png" alt="image-20201227201741602"></p>
<h2 id="七、后续"><a href="#七、后续" class="headerlink" title="七、后续"></a>七、后续</h2><p>至此，我们的博客已经基本可以用了，只是现在还部署在本地，其实本地的效果就是发布的效果，后面只把这一整套文件都部署到远程服务器上就可以了，针不戳。第一部分说了， 0202 年我们想搭建一个网站不用自己从头开始写 html，有 Hexo 这么优秀的框架供我们选择，而且还完全免费，那么部署网站怎么办呢？</p>
<p>毕竟马上就要 2021 年了，现在部署网站也不用买服务器啦，有 GitHub Page 和 Gitee Page 等免费服务可供我们选择，只需要注册一个帐号就可以了。虽然 GitHub 在程序员界是最流行的，但是由于网络环境原因访问速度很慢，再加上最近的形势变化，说不定哪天这网站甚至会打不开了，所以国内平台Gitee成了一个不错的选择。</p>
<p>网站部署步骤详情见本系列文章的第二篇和第三篇，这两个步骤只需任选其一即可。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
